{"version":3,"sources":["../src/server.js"],"names":[],"mappings":";;;;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAGA;;;;AACA;;;;AAIA;;;;;;;AAHA,IAAI,UAAU,eAAK,OAAnB;;;;;AAKA,IAAI,MAAM,wBAAV;;;AAGA,iBAAO,IAAP;;;AAGA,IAAI,GAAJ,CAAQ,SAAR,EAAmB,kBAAQ,MAAR,CAAkB,SAAlB,aAAnB;;;AAGA,IAAI,GAAJ,CAAQ,qBAAW,IAAX,EAAR,E;AACA,IAAI,GAAJ,CAAQ,qBAAW,UAAX,CAAsB,EAAE,UAAU,IAAZ,EAAtB,CAAR,E;;;AAGA,IAAI,GAAJ,CAAQ,aAAR,EAAuB,KAAvB;;;AAGA,QAAQ,cAAR,EAAwB,OAAxB,CAAiC,GAAjC;;;AAGA,IAAI,GAAJ,CAAQ,UAAS,GAAT,EAAc,GAAd,EAAmB,GAAnB,EAAwB,IAAxB,EAA8B;AAClC,KAAI,MAAJ,CAAW,IAAI,MAAJ,IAAc,GAAzB;AACH,CAFD;;;AAKA,IAAI,GAAJ,CAAQ,MAAR,EAAiB,QAAQ,GAAR,CAAY,IAA7B;;;;;;;AAQA;AACA,IAAI,MAAM,wBAAW,KAAX,CAAkB;AAC3B,QAAO,QAAQ,GAAR,CAAY;AADQ,CAAlB,CAAV;QAGS,G,GAAA,G;;;AAET,IAAI,MAAJ,CAAW,IAAI,GAAJ,CAAQ,MAAR,CAAX,EAA4B,YAAM;AAChC,SAAQ,GAAR,CAAY,uBAAuB,IAAI,GAAJ,CAAQ,MAAR,CAAnC;;AAED,KAAI,QAAJ,CAAa,UAAC,GAAD,EAAS;AACpB,MAAI,CAAC,GAAL,EAAU;AACR,WAAQ,GAAR,CAAY,sBAAZ;;;;;;;;;AASF,OAAI,OAAJ,CAAY,eAAZ,kBAA2C,IAA3C,EAAiD,IAAjD,EAAuD,kBAAvD;AACC,GAXD,MAWO;AACL,WAAQ,GAAR,CAAY,YAAZ;AACD;AACF,EAfD;AAiBA,CApBD","file":"server.js","sourcesContent":["// modules \nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport http from 'http';\nimport dotenv from 'dotenv';\n\n// CronJob\nimport cron from 'cron';\nimport cronFunction from './app/cron';\nvar CronJob = cron.CronJob;\n\n// botkit\nimport { controller, customConfigBot } from './bot/controllers';\n\nvar app = express();\n\n// configuration \ndotenv.load();\n\n// public folder for images, css,...\napp.use('/assets', express.static(`${__dirname}/public`));\n\n//parsing\napp.use(bodyParser.json()); // for parsing application/json\napp.use(bodyParser.urlencoded({ extended: true })); //for parsing url encoded\n\n// view engine ejs\napp.set('view engine', 'ejs');\n\n// routes\nrequire('./app/router').default((app));\n\n// Error Handling\napp.use(function(err, req, res, next) {\n    res.status(err.status || 500);\n});\n\n//port for Heroku\napp.set('port', (process.env.PORT));\n\n\n/**\n * \t\t\tSTART THE SERVER + BOT\n */\n// ===================================================\n\ncustomConfigBot(controller);\nvar bot = controller.spawn(({\n\ttoken: process.env.BOT_TOKEN\n}));\nexport { bot };\n\napp.listen(app.get('port'), () => {\n  console.log('listening on port ' + app.get('port'));\n\n\tbot.startRTM((err) => {\n\t  if (!err) {\n\t    console.log(\"RTM on and listening\");\n\n\t    /**\n\t\t\t * \t\t\t\t\t\t*** CRON JOB ***\n\t\t\t * @param  time increment in cron format\n\t\t\t * @param  function to run each increment\n\t\t\t * @param  function to run at end of cron job\n\t\t\t * @param  timezone of the job\n\t\t\t */\n\t\t\tnew CronJob('*/5 * * * * *', cronFunction, null, true, \"America/New_York\");\n\t  } else {\n\t    console.log(\"RTM failed\")\n\t  }\n\t});\n  \n});\n"]}