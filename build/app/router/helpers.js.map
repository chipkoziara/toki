{"version":3,"sources":["../../../src/app/router/helpers.js"],"names":[],"mappings":";;;;;QAGgB,c,GAAA,c;QAUA,Q,GAAA,Q;QAUA,Q,GAAA,Q;;AAvBhB;;AAGO,SAAS,cAAT,CAAwB,QAAxB,EAAkC,QAAlC,EAA4C;;AAEjD,MAAI,cAAc,qCAAlB;AACA,iBAAe,eAAe,QAAQ,GAAR,CAAY,QAA1C;AACA,iBAAe,oBAAoB,QAAQ,GAAR,CAAY,YAA/C;AACA,iBAAe,WAAW,QAA1B;AACA,iBAAe,mBAAmB,QAAQ,GAAR,CAAY,cAA/B,GAAgD,QAA/D;AACA,SAAO,WAAP;AACD;;AAEM,SAAS,QAAT,CAAkB,IAAlB,EAAwB,IAAxB,EAA8B;AACnC,UAAQ,GAAR,CAAY,KAAK,IAAL,GAAY,YAAxB;AACA,UAAQ,GAAR,CAAY,IAAZ;AACA,MAAI,QAAQ,OAAZ,EAAqB;AACnB,qCAAe,IAAf;AACD,GAFD,MAEO,IAAI,QAAQ,QAAZ,EAAsB;AAC3B,uCAAiB,IAAjB;AACD;AACF;;AAEM,SAAS,QAAT,CAAkB,IAAlB,EAAwB,QAAxB,EAAkC;;;AAGvC,MAAI,SAAS,KAAK,KAAL,CAAW,KAAX,CAAiB,IAAjB,CAAb;;AAEA,0BAAM,UAAN,CAAiB,OAAjB,CAAyB,KAAzB,CAA+B,GAA/B,CAAmC,SAAS,OAA5C,EAAqD,UAAS,GAAT,EAAc,IAAd,EAAoB;AACvE,YAAQ,KAAR;AACA,QAAI,CAAC,IAAL,EAAW;AACP,cAAQ,IAAR;AACA,aAAO;AACH,YAAI,SAAS,OADV;AAEH,sBAAc,KAAK,YAFhB;AAGH,gBAAQ,MAHL;AAIH,iBAAS,SAAS,OAJf;AAKH,cAAM,SAAS;AALZ,OAAP;AAOH;AACD,4BAAM,UAAN,CAAiB,OAAjB,CAAyB,KAAzB,CAA+B,IAA/B,CAAoC,IAApC,EAA0C,UAAS,GAAT,EAAc,EAAd,EAAkB;AAC1D,UAAI,GAAJ,EAAS;AACP,gBAAQ,GAAR,CAAY,yCAAZ,EAAuD,GAAvD;AACA,gCAAM,UAAN,CAAiB,OAAjB,CAAyB,OAAzB,EAAkC,CAAC,GAAD,CAAlC;AACD,OAHD,MAIK;AACH,YAAI,KAAJ,EAAW;AACT,kBAAQ,GAAR,CAAY,cAAc,GAAG,QAAH,EAAd,GAA8B,QAA1C;AACD,SAFD,MAGK;AACH,kBAAQ,GAAR,CAAY,UAAU,GAAG,QAAH,EAAV,GAA0B,UAAtC;AACD;AACD,gBAAQ,GAAR,CAAY,6DAAZ;AACD;AACF,KAdD;AAeD,GA3BD;AA4BD","file":"helpers.js","sourcesContent":["import { connectOnLogin, connectOnInstall } from '../../bot/controllers';\nimport { controller as slack } from '../../bot/controllers';\n\nexport function getAuthAddress(authCode, uri_path) {\n  //post code, app ID, and app secret, to get token\n  var authAddress = 'https://slack.com/api/oauth.access?'\n  authAddress += 'client_id=' + process.env.SLACK_ID\n  authAddress += '&client_secret=' + process.env.SLACK_SECRET\n  authAddress += '&code=' + authCode\n  authAddress += '&redirect_uri=' + process.env.SLACK_REDIRECT + uri_path;\n  return authAddress;\n}\n\nexport function startBot(team, type) {\n  console.log(team.name + \" start bot\")\n  console.log(team);\n  if (type == 'login') {\n    connectOnLogin(team)\n  } else if (type == 'create') {\n    connectOnInstall(team)\n  }\n}\n\nexport function saveUser(auth, identity) {\n\n  // what scopes did we get approved for?\n  var scopes = auth.scope.split(/\\,/);\n\n  slack.controller.storage.users.get(identity.user_id, function(err, user) {\n    isnew = false;\n    if (!user) {\n        isnew = true;\n        user = {\n            id: identity.user_id,\n            access_token: auth.access_token,\n            scopes: scopes,\n            team_id: identity.team_id,\n            user: identity.user,\n        };\n    }\n    slack.controller.storage.users.save(user, function(err, id) {\n      if (err) {\n        console.log('An error occurred while saving a user: ', err);\n        slack.controller.trigger('error', [err]);\n      }\n      else {\n        if (isnew) {\n          console.log(\"New user \" + id.toString() + \" saved\");\n        }\n        else {\n          console.log(\"User \" + id.toString() + \" updated\");\n        }\n        console.log(\"================== END TEAM REGISTRATION ==================\")\n      }\n    });\n  });\n}"]}