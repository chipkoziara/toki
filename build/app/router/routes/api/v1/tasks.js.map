{"version":3,"sources":["../../../../../../src/app/router/routes/api/v1/tasks.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AAIA;;;;AAFA,IAAI,SAAS,kBAAQ,MAAR,EAAb;;;;;;;;AAUA,OAAO,GAAP,CAAW,GAAX,EAAgB,UAAC,GAAD,EAAM,GAAN,EAAc,CAC7B,CADD;;;AAIA,OAAO,IAAP,CAAY,GAAZ,EAAiB,UAAC,GAAD,EAAM,GAAN,EAAc;;AAE7B,MAAI,UAAU,EAAd;;;;AAIA,MAAI,OAAO,EAAE,MAAM,IAAI,IAAJ,CAAS,IAAjB,EAAuB,MAAM,KAA7B,EAAX;;AAEA,UAAQ,GAAR;;;;;AAKA,eAAG,OAAH,+BAA+B,UAAC,GAAD,EAAM,MAAN,EAAc,IAAd,EAAuB;;;AAGpD,QAAI,GAAJ,EAAS;AACP;AACA,cAAQ,GAAR,CAAY,GAAZ;AACA,aAAO,IAAI,MAAJ,CAAW,GAAX,EAAgB,IAAhB,CAAqB,EAAE,SAAS,KAAX,EAAkB,MAAM,GAAxB,EAArB,CAAP;AACD;;;AAGD,WAAO,KAAP,CAAa,8CAAb,EAA6D,CAAC,KAAK,IAAN,EAAY,KAAK,QAAjB,CAA7D;;;AAGA,QAAI,QAAQ,OAAO,KAAP,CAAa,qCAAb,CAAZ;;;AAGA,UAAM,EAAN,CAAS,KAAT,EAAgB,UAAC,GAAD,EAAS;AACvB,cAAQ,GAAR,qBAA8B,KAAK,SAAL,CAAe,GAAf,CAA9B;AACA,cAAQ,IAAR,CAAa,GAAb;AACD,KAHD;;;AAMA,UAAM,EAAN,CAAS,KAAT,EAAgB,YAAM;AACpB;AACA,aAAO,IAAI,IAAJ,CAAS,OAAT,CAAP;AACD,KAHD;AAKD,GA3BD;AA6BD,CA1CD;;;AA6CA,OAAO,GAAP,CAAW,MAAX,EAAmB,UAAC,GAAD,EAAM,GAAN,EAAc,CAChC,CADD;;;AAIA,OAAO,GAAP,CAAW,MAAX,EAAmB,UAAC,GAAD,EAAM,GAAN,EAAc,CAChC,CADD;;;AAIA,OAAO,MAAP,CAAc,MAAd,EAAsB,UAAC,GAAD,EAAM,GAAN,EAAc,CACnC,CADD,EACG;;kBAGY,M","file":"tasks.js","sourcesContent":["import request from 'request';\nimport express from 'express';\nimport pg from 'pg';\n\nvar router = express.Router();\n\nimport { dbConnectionString } from '../../../../models/database';\n\n/**\n *    TASKS CONTROLLER\n *    `/api/v1/tasks`\n */\n\n// index\nrouter.get('/', (req, res) => {\n});\n\n// create\nrouter.post('/', (req, res) => {\n\n  var results = [];\n\n  // grab data from API request\n  // done is defaulted to false w/ new tasks\n  var data = { text: req.body.text, done: false };\n\n  console.log(`in post: ${dbConnectionString}`);\n  // var client = new pg.Client(connectionString);\n  // client.connect();\n\n  // get a PG client from connection pool\n  pg.connect(dbConnectionString, (err, client, done) => {\n\n    // handle connection errors\n    if (err) {\n      done();\n      console.log(err);\n      return res.status(500).json({ success: false, data: err });\n    }\n\n    // SQL insert\n    client.query(\"INSERT INTO tasks(text, done) values($1, $2)\", [data.text, data.complete]);\n\n    // return back tasks\n    var query = client.query(\"SELECT * FROM tasks ORDER by id ASC\");\n\n    // stream results back in node fashion\n    query.on('row', (row) => {\n      console.log(`returning row: ${JSON.stringify(row)}`);\n      results.push(row);\n    });\n\n    // after all data is returned, close and return results\n    query.on('end', () => {\n      done();\n      return res.json(results);\n    })\n\n  });\n\n});\n\n// read\nrouter.get('/:id', (req, res) => {\n});\n\n// update\nrouter.put('/:id', (req, res) => {\n});\n\n// delete\nrouter.delete('/:id', (req, res) => {\n});;\n\n\nexport default router;"]}