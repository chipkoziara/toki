{"version":3,"sources":["../../../../src/app/router/routes/login.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;AAKA;;;;AAHA,IAAI,SAAS,kBAAQ,MAAR,EAAb;;;;;;;;;AASA,OAAO,GAAP,CAAW,GAAX,EAAgB,UAAC,GAAD,EAAM,GAAN,EAAc;;AAE5B,UAAQ,GAAR,CAAY,wBAAZ;;;AAGA,MAAI,WAAW,IAAI,KAAJ,CAAU,IAAzB;;AAEA,MAAI,CAAC,QAAL,EAAe;;AAEb,QAAI,QAAJ,CAAa,GAAb;AACD,GAHD,MAGO;AACL,YAAQ,GAAR,sCAAgD,QAAhD;AACA,UAAM,QAAN,EAAgB,GAAhB;AACD;AAEF,CAfD;;;AAkBA,IAAI,QAAQ,SAAR,KAAQ,CAAC,QAAD,EAAW,GAAX,EAAmB;;AAE7B,MAAI,cAAc,6BAAe,QAAf,EAAyB,OAAzB,CAAlB;;AAEA,oBAAQ,GAAR,CAAY,WAAZ,EAAyB,UAAU,KAAV,EAAiB,QAAjB,EAA2B,IAA3B,EAAiC;AACxD,QAAI,KAAJ,EAAU;AACR,cAAQ,GAAR,CAAY,KAAZ;AACA,UAAI,UAAJ,CAAe,GAAf;AACD,KAHD,MAGO;AACL,UAAI,OAAO,KAAK,KAAL,CAAW,IAAX,CAAX;AACA,cAAQ,GAAR,CAAY,iBAAZ;AACA,cAAQ,GAAR,CAAY,IAAZ;AACA,uBAAiB,IAAjB,EAAsB,GAAtB;AACD;AACF,GAVD;AAWD,CAfD;;;;AAmBA,IAAI,mBAAmB,SAAnB,gBAAmB,CAAC,IAAD,EAAO,GAAP,EAAe;;;;AAIpC,MAAI,MAAM,uCAAV;AACA,SAAO,WAAW,KAAK,YAAvB;;AAEA,UAAQ,GAAR,CAAY,sBAAZ;AACA,UAAQ,GAAR,CAAY,GAAZ;;AAEA,oBAAQ,GAAR,CAAY,GAAZ,EAAiB,UAAC,KAAD,EAAQ,QAAR,EAAkB,IAAlB,EAA2B;;AAE1C,YAAQ,GAAR,CAAY,uBAAZ;;AAEA,QAAI,KAAJ,EAAW;AACT,cAAQ,GAAR,CAAY,KAAZ;AACA,UAAI,UAAJ,CAAe,GAAf;AACD,KAHD,MAGO;AACL,UAAI;;AAEF,gBAAQ,GAAR,CAAY,iBAAZ;AACA,YAAI,WAAW,KAAK,KAAL,CAAW,IAAX,CAAf;AACA,gBAAQ,GAAR,CAAY,QAAZ;;;;AAIA,YAAI,SAAS,EAAb,EAAiB;AACf,cAAI,IAAJ,CAAS,qBAAT;AACD;;;AAGD,YAAI,KAAJ,EAAW;AACT,cAAI,SAAS,EAAb,EAAiB;AACf,gBAAI,OAAO;AACT,kBAAI,SAAS,IAAT,CAAc,EADT;AAET,mBAAI;AACF,uBAAO,KAAK,GAAL,CAAS,gBADd;AAEF,yBAAS,KAAK,GAAL,CAAS,WAFhB;AAGF,2BAAW,SAAS,IAAT,CAAc;AAHvB,eAFK;AAOT,yBAAW,SAAS,IAAT,CAAc,EAPhB;AAQT,oBAAM,SAAS,IAAT,CAAc;AARX,aAAX;;AAWA,mCAAS,IAAT,EAAe,OAAf;;;AAGA,oBAAQ,GAAR;AACA,oBAAQ,GAAR,CAAY,gBAAZ;AACA,oBAAQ,GAAR,CAAY,QAAZ;AACA,oBAAQ,GAAR,CAAY,OAAZ;AACA,oBAAQ,GAAR,CAAY,IAAZ;AACA,oBAAQ,GAAR,CAAY,OAAZ;AACA,oBAAQ,GAAR,CAAY,IAAZ;;AAEA,gBAAI,IAAJ,CAAS,qBAAT;AACA,mCAAS,IAAT,EAAe,IAAf;AACD,WAzBD,MAyBO;AACL,gBAAI,IAAJ,CAAS,yBAAT;AACD;AACF;AAEF,OA5CD,CA4CE,OAAM,CAAN,EAAS;AACT,gBAAQ,GAAR,CAAY,CAAZ;AACD;AACF;AAEF,GAzDD;AA2DD,CArED;;kBAuEe,M","file":"login.js","sourcesContent":["import request from 'request';\nimport express from 'express';\n\nvar router = express.Router();\n\n// bring in helpers\nimport { getAuthAddress, startBot, saveUser } from '../helpers';\n\n// sign in with slack -- redirect from slack\n// 1. use returned OAuth Code and send back w/ client_id and secret\n// 2. verify user w/ returned token\n// 3. start bot and initiate the conversation\nrouter.get('/', (req, res) => {\n\n  console.log(\"STARTING TEAM LOGIN...\");\n\n  // temp authorization code\n  var authCode = req.query.code;\n\n  if (!authCode) {\n    // user refused auth\n    res.redirect('/');\n  } else {\n    console.log (`Logging in user with auth code: ${authCode}`);\n    login(authCode, res);\n  }\n\n});\n\n// for subsequent logins\nvar login = (authCode, res) => {\n\n  var authAddress = getAuthAddress(authCode, \"login\");\n\n  request.get(authAddress, function (error, response, body) {\n    if (error){\n      console.log(error)\n      res.sendStatus(500)\n    } else {\n      var auth = JSON.parse(body)\n      console.log(\"User login auth\")\n      console.log(auth)\n      authenticateTeam(auth,res)\n    }\n  });\n}\n\n// after getting access token...\n// subsequent times => authenticate\nvar authenticateTeam = (auth, res) => {\n\n  // you have bot access_token now\n  // use this to identify the user\n  var url = 'https://slack.com/api/users.identity?';\n  url += 'token=' + auth.access_token;\n\n  console.log(\"in authenticate team\");\n  console.log(url);\n\n  request.get(url, (error, response, body) => {\n    \n    console.log(\"in identify user call\");\n\n    if (error) {\n      console.log(error);\n      res.sendStatus(500);\n    } else {\n      try {\n\n        console.log(\"identified user\");\n        var identity = JSON.parse(body);\n        console.log(identity);\n\n        // if identity is true, then activate the bot\n        // this is not valid. activating bot cannot be done by logging in -- you can still provide functionality but it must be via user_id and team_id, and slack SSO is not meant for everyone to have access to your bot\n        if (identity.ok) {\n          res.send(\"You have logged in!\");\n        }\n        \n        // this code can be used later (for an \"wake up Navi\" button)\n        if (false) {\n          if (identity.ok) {\n            var team = {\n              id: identity.team.id,\n              bot:{\n                token: auth.bot.bot_access_token,\n                user_id: auth.bot.bot_user_id,\n                createdBy: identity.user.id\n              },\n              createdBy: identity.user.id,\n              name: identity.user.name\n            }\n            // start the bot!\n            startBot(team, \"login\");\n\n            // user has logged in\n            console.log(`User has logged in. Now we must store that session on our server. Authenticate and Authorize the following user properly:`);\n            console.log(\"User identity:\");\n            console.log(identity);\n            console.log(\"Auth:\");\n            console.log(auth);\n            console.log(\"Team:\");\n            console.log(team);\n\n            res.send(\"You have logged in!\");\n            saveUser(auth, team)\n          } else {\n            res.send(\"Sorry! Please try again\");\n          }\n        }\n\n      } catch(e) {\n        console.log(e);\n      }\n    }\n\n  })\n\n}\n\nexport default router;"]}