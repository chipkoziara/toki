{"version":3,"sources":["../../src/app/cron.js"],"names":[],"mappings":";;;;;;kBASe,YAAW;;;AAGzB;AACA;AAEA,C;;AAfD;;AACA;;AAGA;;;;AAEA;;;;;;AAWA,IAAI,mBAAmB,SAAnB,gBAAmB,GAAM;;;;;AAK5B,kBAAO,WAAP,CAAmB,OAAnB,CAA2B;AAC1B,SAAO,+BAAgC,IAAI,IAAJ,EAAhC,EAA4C,IAA5C;AADmB,EAA3B,EAEG,IAFH,CAEQ,UAAC,YAAD,EAAkB;;;;;AAKzB,MAAI,oBAAoB,EAAxB;;AAEA,eAAa,OAAb,CAAqB,UAAC,WAAD,EAAiB;AAAA,OAE7B,MAF6B,GAEZ,WAFY,CAE7B,MAF6B;AAAA,OAErB,IAFqB,GAEZ,WAFY,CAErB,IAFqB;;;;;;;;AAUrC,eAAY,MAAZ,CAAmB;AAClB,UAAM;AADY,IAAnB,EAGC,IAHD,CAGM,YAAM;AACX,WAAO,iBAAO,IAAP,CAAY,IAAZ,CAAiB;AACvB,YAAO,EAAE,IAAI,MAAN,EADgB;AAEvB,cAAS,CAAE,iBAAO,SAAT;AAFc,KAAjB,CAAP;AAIA,IARD,EASC,IATD,CASM,UAAC,IAAD,EAAU;AAAA,QAET,WAFS,GAEO,KAAK,SAFZ,CAET,WAFS;;AAGf,QAAI,SAAS;AACZ;AADY,KAAb;;;AAKA,4BAAW,OAAX,CAAmB,kBAAnB,EAAuC,cAAM,MAAN,CAAvC;AAEA,IAnBD;AAqBA,GA/BD;AAiCA,EA1CD;AA2CA,CAhDD;;;;;;;;AAkDA,IAAI,oBAAoB,SAApB,iBAAoB,GAAM;;;;AAI7B,kBAAO,QAAP,CAAgB,OAAhB,CAAwB;AACvB,SAAO,kCAAkC,IAAI,IAAJ,EAAlC,EAA8C,IAA9C;AADgB,EAAxB,EAEG,IAFH,CAEQ,UAAC,SAAD,EAAe;;;;AAItB,MAAI,iBAAiB,EAArB;AACA,YAAU,OAAV,CAAkB,UAAC,QAAD,EAAc;AAAA,OAEvB,MAFuB,GAEN,QAFM,CAEvB,MAFuB;AAAA,OAEf,IAFe,GAEN,QAFM,CAEf,IAFe;;;;;;;AAS/B,YAAS,MAAT,CAAgB;AACZ,UAAM;AADM,IAAhB,EAGC,IAHD,CAGM,YAAM;AACX,WAAO,iBAAO,IAAP,CAAY,IAAZ,CAAiB;AACrB,YAAO,EAAE,IAAI,MAAN,EADc;AAErB,cAAS,CACP,iBAAO,SADA;AAFY,KAAjB,CAAP;AAOA,IAXD,EAYC,IAZD,CAYM,UAAC,IAAD,EAAU;;;AAGb,gBAAI,wBAAJ,CAA6B;AAC3B,WAAM,KAAK,SAAL,CAAe;AADM,KAA7B,EAEG,UAAC,GAAD,EAAM,KAAN,EAAgB;;AAElB,SAAI,KAAJ,EAAW;AACV,UAAI,aAAa,SAAS,UAAT,UAA4B,SAAS,UAArC,UAAuD,EAAxE;AACA,UAAI,0CAAwC,UAAxC,6BAAJ;;AAEA,YAAM,GAAN,CAAU,OAAV;AACA;AAED,KAXD;AAaD,IA5BF;AA8BA,GAvCD;AAwCA,EA/CD;AAgDA,CApDD","file":"cron.js","sourcesContent":["import { bot } from '../server';\nimport { controller } from '../bot/controllers';\n\n// sequelize models\nimport models from './models';\n\nimport moment from 'moment';\n\n// the cron file!\nexport default function() {\n\n\t// check for reminders and sessions every minute!\n\tcheckForReminders();\n\tcheckForSessions();\n\n}\n\nvar checkForSessions = () => {\n\n\t// var now = moment();\n\t// var fiveMinutesAgo = now.subtract(5, \"minutes\").format(\"YYYY-MM-DD HH:mm:ss\");\n\t\n\tmodels.WorkSession.findAll({\n\t\twhere: [ `\"endTime\" < ? AND open = ?`, new Date(), true ]\n\t}).then((workSessions) => {\n\n\t\t// these are the work sessions that have ended within last 5 minutes\n\t\t// and have not closed yet\n\t\t\n\t\tvar workSessionsArray = [];\n\n\t\tworkSessions.forEach((workSession) => {\n\n\t\t\tconst { UserId, open } = workSession;\n\n\t\t\t/**\n\t\t\t * \t\tFor each work session\n\t\t\t * \t\t\t1. close it\n\t\t\t * \t\t\t2. find user and start end_work_session flow\n\t\t\t */\n\t\t\t\n\t\t\tworkSession.update({\n\t\t\t\topen: false\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\treturn models.User.find({\n\t\t\t\t\twhere: { id: UserId },\n\t\t\t\t\tinclude: [ models.SlackUser ]\n\t\t\t\t});\n\t\t\t})\n\t\t\t.then((user) => {\n\n\t\t\t\tvar { SlackUserId } = user.SlackUser;\n\t\t\t\tvar config = {\n\t\t\t\t\tSlackUserId\n\t\t\t\t}\n\n\t\t\t\t// alarm is up for session\n\t\t\t\tcontroller.trigger('session_timer_up', [bot, config]);\n\t\t\t\t\n\t\t\t})\n\n\t\t});\n\n\t});\n}\n\nvar checkForReminders = () => {\n\t// this is for testing\n\t// var oneMinute = moment().add(5,'minutes').format(\"YYYY-MM-DD HH:mm:ss\");\n\n\tmodels.Reminder.findAll({\n\t\twhere: [`\"remindTime\" < ? AND open = ?`, new Date(), true]\n\t}).then((reminders) => {\n\n\t\t// these are all reminders that have passed expiration date\n\t\t// yet have not been closed yet\n\t\tvar remindersArray = [];\n\t\treminders.forEach((reminder) => {\n\t\t\t\n\t\t\tconst { UserId, open } = reminder;\n\n\t\t\t// for each open reminder:\n\t\t\t// 1. close the reminder\n\t\t\t// 2. find the user of the reminder\n\t\t\t// 3. send the reminder\n\t\t\t\n\t\t\treminder.update({\n\t\t    \topen: false\n\t\t   })\n\t\t\t.then(() => {\n\t\t\t\treturn models.User.find({\n\t\t\t    where: { id: UserId },\n\t\t\t    include: [\n\t\t\t      models.SlackUser\n\t\t\t    ]\n\t\t\t  })\n\t\t\t  \n\t\t\t})\n\t\t\t.then((user) => {\n\n\t\t  \t// send the message!\n\t\t    bot.startPrivateConversation({\n\t\t      user: user.SlackUser.SlackUserId \n\t\t    }, (err, convo) => {\n\n\t\t    \tif (convo) {\n\t\t    \t\tvar customNote = reminder.customNote ? `(\\`${reminder.customNote}\\`)` : '';\n\t\t\t    \tvar message = `Hey! You wanted a reminder ${customNote} :smiley: :alarm_clock: `;\n\n\t\t\t    \tconvo.say(message);\n\t\t    \t}\n\t\t    \t\n\t\t    });\n\n\t\t  });\n\n\t\t});\n\t});\n}"]}