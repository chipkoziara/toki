{"version":3,"sources":["../../../../src/app/api/v1/slack_users.js"],"names":[],"mappings":"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","file":"slack_users.js","sourcesContent":["import request from 'request';\nimport express from 'express';\nimport pg from 'pg';\nimport moment from 'moment-timezone';\n\nvar router = express.Router();\n\nimport { bot } from '../../../server';\nimport { controller } from '../../../bot/controllers';\nimport { getTimeZoneOffsetForUser, seedDatabaseWithExistingSlackUsers } from '../../../bot/lib/slackApiHelpers';\nimport models from '../../models';\n\n/**\n *    SLACK USERS CONTROLLER\n *    `/api/v1/slack_users`\n */\n\n// index\nrouter.get('/', (req, res) => {\n\n// this shows how to use moment-timezone to create timezone specific dates\nif (false) {\n  // 2016-06-13T13:55:00.000-04:00\n  var timeEST = moment.tz(\"2016-06-13T14:55:00.000\", \"America/New_York\");\n  console.log(\"huh\\n\\n\\n\\n\\n\");\n\n  console.log(\"\\n\\n\\n\\nEST:\")\n  console.log(timeEST.format(\"YYYY-MM-DD HH:mm:ss\"));\n  console.log(timeEST.utc().format(\"YYYY-MM-DD HH:mm:ss\"));\n\n  console.log(\"\\n\\n\\n\\nPST:\")\n  var timePST = moment.tz(\"2016-06-13T14:55:00.000\", \"America/Los_Angeles\");\n  console.log(timePST.format(\"YYYY-MM-DD HH:mm:ss\"));\n  console.log(timePST.utc().format(\"YYYY-MM-DD HH:mm:ss\"));\n  console.log(\"OKAY...\\n\\n\\n\\n\")\n\n  var now = moment();\n  var minutesDuration = Math.round(moment.duration(timePST.diff(now)).asMinutes());\n  console.log(`this many minutes difference for 1:55 PST: ${minutesDuration}`);\n\n  var minutesDuration = moment.duration(timeEST.diff(now)).asMinutes();\n  console.log(`this many minutes difference for 1:55 EST: ${minutesDuration}`);\n}\n\nif (false) {\n\n  // this shows how you can ORM inserts w/ associations\n  const id = 2;\n  models.WorkSession.find({\n    where: { id }\n  }).then((workSession) => {\n    models.DailyTask.find({\n      where: { id: 14 }\n    }).then((dailyTask) => {\n      console.log(\"in daily task!!\");\n      console.log(dailyTask);\n      workSession.setDailyTasks([dailyTask.id]);\n    });\n  });\n\n}\n\nif (false) {\n  models.SlackUser.findAll({\n  \tinclude: [models.User]\n  }).then((slackUsers) => {\n    res.json(slackUsers);\n  });\n} \nvar remindTime = moment().format(\"YYYY-MM-DD HH:mm:ss\");\nvar UserId = 1;\nvar customNote = \"test note\";\n\n// get most recent start session group\n// then make all live tasks below that into pending\nmodels.User.find({\n  where: { id: UserId }\n})\n.then((user) => {\n  user.getSessionGroups({\n    limit: 1,\n    order: `\"SessionGroup\".\"createdAt\" DESC`,\n    where: [ `\"SessionGroup\".\"type\" = ?`, \"start_work\"]\n  })\n  .then((sessionGroups) => {\n    var sessionGroup = sessionGroups[0];\n    var sessionGroupCreatedAt = sessionGroup.createdAt;\n    // safety measure of making all previous live tasks pending\n    user.getDailyTasks({\n      where: [`\"DailyTask\".\"createdAt\" < ? AND \"DailyTask\".\"type\" = ?`, sessionGroup.createdAt, \"pending\"]\n    })\n    .then((dailyTasks) => {\n      dailyTasks.forEach((dailyTask) => {\n        dailyTask.update({\n          type: \"archived\"\n        });\n      });\n      user.getDailyTasks({\n        where: [`\"DailyTask\".\"createdAt\" < ? AND \"DailyTask\".\"type\" = ?`, sessionGroup.createdAt, \"live\"]\n      })\n      .then((dailyTasks) => {\n        dailyTasks.forEach((dailyTask) => {\n          dailyTask.update({\n            type: \"pending\"\n          });\n        });\n      });\n    });\n  })\n})\n\n\n\n  // models.Reminder.create({\n  //   remindTime,\n  //   UserId,\n  //   customNote\n  // }).then((reminder) => {\n  //   res.json(reminder);\n  // });\n  // models.Reminder.find({\n  //   where: { id: 34 }\n  // }).then((reminder) => {\n  //   var time = reminder.createdAt;\n  //   var timeMoment = moment(time).tz(\"America/Los_Angeles\").format();\n  //   var timeMoment = moment(time).tz(\"America/New_York\").format();\n  //   res.json({time: timeMoment});\n  // })\n\n  var SlackUserId = 'U121ZK15J';\n  var UserId = 1;\n  // models.User.find({\n  //   where: [`\"User\".\"id\" = ?`, UserId ],\n  //   include: [\n  //     models.SlackUser\n  //   ]\n  // })\n  // .then((user) => {\n  //   // get the msot start_work session group to measure\n  //   // a day's worth of work\n  //   user.getSessionGroups({\n  //     where: [`\"SessionGroup\".\"type\" = ?`, \"start_work\"],\n  //     order: `\"SessionGroup\".\"createdAt\" DESC`,\n  //     limit: 1\n  //   })\n  //   .then((sessionGroups) => {\n\n  //     // uh oh error (first time trying to end day)\n  //     if (sessionGroups.length == 0) {\n  //       console.log(\"oh no!\");\n  //     }\n  //     console.log(sessionGroups);\n  //     res.json(sessionGroups);\n  //   })\n  // });\n  // models.User.find({\n  //   where: [`\"User\".\"id\" = ?`, UserId ],\n  //   include: [\n  //     models.SlackUser\n  //   ]\n  // })\n  // .then((user) => {\n  //   console.log(\"\\n\\n\\n\\n\\n\");\n  //   console.log(user.nickName);\n  //   console.log(user.SlackUser.SlackUserId);\n  //   console.log(user.dataValues.SlackUser.SlackUserId);\n  //   console.log(\"\\n\\n\\n\\n\\n\");\n  //   return user.getReminders({\n  //     where: [ `\"open\" = ? AND \"type\" IN (?)`, true, [\"work_session\", \"break\"] ]\n  //   });\n  // })\n  // .then((reminders) => {\n  //   res.json(reminders);\n  // });\n\n  // models.User.find({\n  //   where: [`\"SlackUser\".\"SlackUserId\" = ?`, SlackUserId ],\n  //   include: [\n  //     models.SlackUser\n  //   ]\n  // })\n  // .then((user) => {\n\n  //   // cannot start a session if user is already in one!\n  //   return user.getWorkSessions({\n  //     where: [`\"open\" = ?`, true ]\n  //   })\n  //   .then((workSessions) => {\n  //     console.log(\"work sessions!\")\n  //     console.log(workSessions);\n\n  //     // if (Object.keys(workSessions).length === 0 && workSessions.constructor === Object) {\n  //     //   console.log(\"WORK SESSIONS is empty!\");\n  //     // } else {\n  //     //   console.log(\"WORK SESSIONS is not empty...\");\n  //     // }\n\n  //     console.log(\"user\");\n  //     console.log(user);\n  //   })\n  // })\n  \n\n  // seedDatabaseWithExistingSlackUsers(bot);\n  console.log(\"checking session:\");\n  // checkForSessions();\n  \n});\n\nvar checkForSessions = () => {\n\n  var today = new Date();\n  var fiveMinutesAgo = today.setMinutes(-5);\n  console.log(today);\n  console.log(fiveMinutesAgo);\n\n  var fiveMinutesAgo = moment().subtract(5, \"minutes\");\n  // console.log(moment().utc().format(\"YYYY-MM-DD HH:mm:ss\"));\n  // console.log(fiveMinutesAgo.utc().format(\"YYYY-MM-DD HH:mm:ss\"));\n  // console.log(moment().format(\"YYYY-MM-DD HH:mm:ss\"));\n\n  // models.WorkSession.findAll({\n  //   where: [ `\"endTime\" < ? AND open = ?`, fiveMinutesAgo, true ]\n  // }).then((workSessions) => {\n\n  //   // these are the work sessions that have ended within last 5 minutes\n  //   // and have not closed yet\n    \n  //   var workSessionsArray = [];\n\n  //   workSessions.forEach((workSession) => {\n\n  //     const { UserId, open } = workSession;\n\n  //     *\n  //      *    For each work session\n  //      *      1. close it\n  //      *      2. find user and start end_work_session flow\n       \n      \n  //     workSession.update({\n  //       open: false\n  //     })\n  //     .then(() => {\n  //       return models.User.find({\n  //         where: { id: UserId },\n  //         include: [ models.SlackUser ]\n  //       });\n  //     })\n  //     .then((user) => {\n\n  //       // start the end session flow!\n        \n        \n  //     })\n\n  //   });\n\n  // });\n}\n\n// create\nrouter.post('/', (req, res) => {\n  \n\tconst { UserId, SlackUserId } = req.body;\n\n  models.SlackUser.create({\n    SlackUserId,\n    UserId\n  }).then((slackUser) => {\n    res.json(slackUser);\n  });\n\n});\n\n// read\nrouter.get('/:slack_user_id', (req, res) => {\n\n\tmodels.SlackUser.find({\n\t\twhere: { SlackUserId: req.params.slack_user_id },\n\t\tinclude: [\n\t\t\tmodels.User\n\t\t]\n\t}).then((slackUser) => {\n\t\tres.json(slackUser);\n\t})\n\n});\n\n// update\nrouter.put('/:slack_user_id', (req, res) => {\n});\n\n// delete\nrouter.delete('/:slack_user_id', (req, res) => {\n});\n\nexport default router;"]}