{"version":3,"sources":["../../../../src/app/api/v1/tasks.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AAIA;;AACA;;AAGA;;;;;;AANA,IAAI,SAAS,kBAAQ,MAAR,EAAb;;;;;;;;;;;AAcA,OAAO,GAAP,CAAW,GAAX,EAAgB,UAAC,GAAD,EAAM,GAAN,EAAc;;;;;;;;;;;;;;;;;;;;;;AAuB5B,mBAAO,SAAP,CAAiB,OAAjB,CAAyB;AACvB,aAAS,CACP,iBAAO,IADA;AADc,GAAzB,EAIG,IAJH,CAIQ,UAAC,UAAD,EAAgB;AACtB,QAAI,IAAJ,CAAS,UAAT;AACD,GAND;;;;;AAYD,CAnCD;;;AAsCA,OAAO,IAAP,CAAY,GAAZ,EAAiB,UAAC,GAAD,EAAM,GAAN,EAAc;;;;AAAA,kBAIH,IAAI,IAJD;AAAA,MAIrB,IAJqB,aAIrB,IAJqB;AAAA,MAIf,OAJe,aAIf,OAJe;;;;;;;;;AAa7B,mBAAO,IAAP,CAAY,MAAZ,CAAmB;AACjB,UAAM,IADW;AAEjB,YAAQ;AAFS,GAAnB,EAGG,IAHH,CAGQ,UAAC,IAAD,EAAU;AAChB,QAAI,IAAJ,CAAS,IAAT;AACD,GALD;AAOD,CApBD;;;AAuBA,OAAO,GAAP,CAAW,MAAX,EAAmB,UAAC,GAAD,EAAM,GAAN,EAAc;AAAA,MACvB,EADuB,GAChB,IAAI,MADY,CACvB,EADuB;;AAE/B,mBAAO,IAAP,CAAY,IAAZ,CAAiB;AACf,WAAO;AACL;AADK;AADQ,GAAjB,EAIG,IAJH,CAIQ,UAAC,IAAD,EAAU;AAChB,QAAI,IAAJ,CAAS,IAAT;AACD,GAND;AAOD,CATD;;;AAYA,OAAO,GAAP,CAAW,MAAX,EAAmB,UAAC,GAAD,EAAM,GAAN,EAAc;AAAA,mBAEP,IAAI,IAFG;AAAA,MAEvB,KAFuB,cAEvB,KAFuB;AAAA,MAEhB,IAFgB,cAEhB,IAFgB;AAAA,MAGvB,EAHuB,GAGhB,IAAI,MAHY,CAGvB,EAHuB;;;AAK/B,mBAAO,IAAP,CAAY,IAAZ,CAAiB;AACf,WAAO;AACL;AADK;AADQ,GAAjB,EAIG,IAJH,CAIQ,UAAC,IAAD,EAAU;AAChB,QAAI,IAAJ,EAAU;AACR,WAAK,gBAAL,CAAuB;AACrB,oBADqB;AAErB;AAFqB,OAAvB,EAGG,IAHH,CAGQ,UAAC,IAAD,EAAU;AAChB,YAAI,IAAJ,CAAS,IAAT;AACD,OALD;AAMD;AACF,GAbD;AAeD,CApBD;;;AAuBA,OAAO,MAAP,CAAc,MAAd,EAAsB,UAAC,GAAD,EAAM,GAAN,EAAc;AAAA,MAE1B,EAF0B,GAEnB,IAAI,MAFe,CAE1B,EAF0B;;;AAIlC,mBAAO,IAAP,CAAY,OAAZ,CAAoB;AAClB,WAAO;AACL;AADK;AADW,GAApB,EAIG,IAJH,CAIQ,UAAC,IAAD,EAAU;AAChB,QAAI,IAAJ,CAAS,IAAT;AACD,GAND;AAQD,CAZD,EAYG;;kBAEY,M","file":"tasks.js","sourcesContent":["import request from 'request';\nimport express from 'express';\nimport pg from 'pg';\n\nvar router = express.Router();\n\nimport { bot } from '../../../server';\nimport { controller } from '../../../bot/controllers';\n\n// sequelize models\nimport models from '../../models';\n\n/**\n *    TASKS CONTROLLER\n *    `/api/v1/tasks`\n */\n\n// index\nrouter.get('/', (req, res) => {\n\n\n  // this lets me test creating daily tasks on server\n\n  // const data = {\n  //   text: \"test task name\",\n  //   minutes: 50,\n  //   priority: 1,\n  //   UserId: 1\n  // }\n\n  // models.Task.create({\n  //   text: data.text,\n  //   UserId: data.UserId\n  // }).then((task) => {\n  //   models.DailyTask.create({\n  //     TaskId: task.id,\n  //     priority: data.priority,\n  //     minutes: data.minutes\n  //   });\n  // });\n\n  models.DailyTask.findAll({\n    include: [\n      models.Task\n    ]\n  }).then((dailyTasks) => {\n    res.json(dailyTasks);\n  });\n\n  // models.Task.findAll({}).then((tasks) => {\n  //   res.json(tasks);\n  // })\n\n});\n\n// create\nrouter.post('/', (req, res) => {\n\n  // grab data from API request\n  // done is defaulted to false w/ new tasks\n  const { text, user_id } = req.body;\n\n  // THIS IS A PASSING TEST FOR SEPARATION OF CONCERNS\n  // We get the data we need from DB, then can trigger the controller to send the appropriate message to the appropriate person\n\n  // userID for kevin\n  // var userID = \"U121ZK15J\"; // DM ID: \"D1F93BHM3\"\n  // controller.trigger('test_message_send', [bot, userID, `Here is your task: ${data.text}`]);\n\n  models.Task.create({\n    text: text,\n    UserId: user_id\n  }).then((task) => {\n    res.json(task);\n  })\n\n});\n\n// read\nrouter.get('/:id', (req, res) => {\n  const { id } = req.params;\n  models.Task.find({\n    where: {\n      id\n    }\n  }).then((task) => {\n    res.json(task);\n  })\n});\n\n// update\nrouter.put('/:id', (req, res) => {\n\n  const { title, done } = req.body;\n  const { id } = req.params;\n\n  models.Task.find({\n    where: {\n      id\n    }\n  }).then((task) => {\n    if (task) {\n      task.updateAttributes( {\n        title,\n        done\n      }).then((task) => {\n        res.send(task);\n      })\n    }\n  })\n\n});\n\n// delete\nrouter.delete('/:id', (req, res) => {\n\n  const { id } = req.params;\n\n  models.Task.destroy({\n    where: {\n      id\n    }\n  }).then((task) => {\n    res.json(task);\n  })\n\n});;\n\nexport default router;"]}