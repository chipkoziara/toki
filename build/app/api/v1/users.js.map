{"version":3,"sources":["../../../../src/app/api/v1/users.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AAIA;;AACA;;AACA;;;;;;AAJA,IAAI,SAAS,kBAAQ,MAAR,EAAb;;;;;;;;AAYA,OAAO,GAAP,CAAW,GAAX,EAAgB,UAAC,GAAD,EAAM,GAAN,EAAc;;AAE5B,mBAAO,IAAP,CAAY,OAAZ,CAAoB;AAClB,aAAS,CAAC,iBAAO,SAAR;AADS,GAApB,EAEG,IAFH,CAEQ,UAAC,KAAD,EAAW;AACjB,YAAQ,GAAR,CAAY,KAAZ;AACA,QAAI,IAAJ,CAAS,KAAT;AACD,GALD;AAOD,CATD;;;AAYA,OAAO,IAAP,CAAY,eAAZ,EAA6B,UAAC,GAAD,EAAM,GAAN,EAAc;AAAA,kBAEd,IAAI,IAFU;AAAA,MAEjC,KAFiC,aAEjC,KAFiC;AAAA,MAE1B,OAF0B,aAE1B,OAF0B;;;AAIzC,mBAAO,IAAP,CAAY,IAAZ,CAAiB;AACf,WAAO,EAAE,YAAF,EADQ;AAEf,aAAS,CACP,iBAAO,SADA;AAFM,GAAjB,EAMC,IAND,CAMM,UAAC,IAAD,EAAU;;AAEd,gBAAI,wBAAJ,CAA6B;AAC3B,YAAM,KAAK,SAAL,CAAe;AADM,KAA7B,EAGA,UAAC,GAAD,EAAM,KAAN,EAAgB;AACd,YAAM,GAAN,MAAa,OAAb;AACD,KALD;;AAOA,QAAI,IAAJ,CAAS,IAAT;AAED,GAjBD;AAkBD,CAtBD;;;AAyBA,OAAO,IAAP,CAAY,GAAZ,EAAiB,UAAC,GAAD,EAAM,GAAN,EAAc;AAAA,mBAEE,IAAI,IAFN;AAAA,MAErB,KAFqB,cAErB,KAFqB;AAAA,MAEd,WAFc,cAEd,WAFc;;;AAI7B,mBAAO,IAAP,CAAY,MAAZ,CAAmB;AACjB;AADiB,GAAnB,EAEG,IAFH,CAEQ,UAAC,IAAD,EAAU;;AAEhB,QAAI,WAAJ,EAAiB;AACf,uBAAO,SAAP,CAAiB,MAAjB,CAAwB;AACtB,gBAAQ,KAAK,MADS;AAEtB;AAFsB,OAAxB,EAGG,IAHH,CAGQ,UAAC,SAAD,EAAe;AACrB,YAAI,OAAO,iBAAO,IAAP,CAAY,IAAZ,CAAiB;AAC1B,iBAAO,EAAE,IAAI,UAAU,MAAhB,EADmB;AAE1B,mBAAS,CACP,iBAAO,SADA;AAFiB,SAAjB,CAAX;AAMA,YAAI,IAAJ,CAAS,IAAT;AACD,OAXD;AAYD,KAbD,MAaO;AACL,UAAI,IAAJ,CAAS,IAAT;AACD;AACF,GApBD;AAsBD,CA1BD;;;AA6BA,OAAO,GAAP,CAAW,MAAX,EAAmB,UAAC,GAAD,EAAM,GAAN,EAAc;AAAA,MAEvB,EAFuB,GAEhB,IAAI,MAFY,CAEvB,EAFuB;;;AAI/B,MAAI,OAAO,iBAAO,IAAP,CAAY,IAAZ,CAAiB;AAC1B,WAAO,EAAE,MAAF,EADmB;AAE1B,aAAS,CACP,iBAAO,SADA;AAFiB,GAAjB,EAKR,IALQ,CAKH,UAAC,IAAD,EAAU;AAChB,QAAI,IAAJ,CAAS,IAAT;AACD,GAPU,CAAX;AASD,CAbD;;;AAgBA,OAAO,GAAP,CAAW,MAAX,EAAmB,UAAC,GAAD,EAAM,GAAN,EAAc,CAChC,CADD;;;AAIA,OAAO,MAAP,CAAc,MAAd,EAAsB,UAAC,GAAD,EAAM,GAAN,EAAc,CACnC,CADD,EACG;;kBAEY,M","file":"users.js","sourcesContent":["import request from 'request';\nimport express from 'express';\nimport pg from 'pg';\n\nvar router = express.Router();\n\nimport { bot } from '../../../server';\nimport { controller } from '../../../bot/controllers';\nimport models from '../../models';\n\n/**\n *    USERS CONTROLLER\n *    `/api/v1/users`\n */\n\n// index\nrouter.get('/', (req, res) => {\n\n  models.User.findAll({\n    include: [models.SlackUser]\n  }).then((users) => {\n    console.log(users);\n    res.json(users);\n  });\n\n});\n\n// post to user's slack\nrouter.post('/message_user', (req, res) => {\n\n  const { email, message } = req.body;\n\n  models.User.find({\n    where: { email },\n    include: [\n      models.SlackUser\n    ]\n  })\n  .then((user) => {\n\n    bot.startPrivateConversation({\n      user: user.SlackUser.SlackUserId \n    },\n    (err, convo) => {\n      convo.say(`${message}`);\n    });\n\n    res.json(user);\n    \n  })\n})\n\n// create\nrouter.post('/', (req, res) => {\n\n  const { email, SlackUserId } = req.body;\n  \n  models.User.create({\n    email\n  }).then((user) => {\n    // create slack_user if it exists\n    if (SlackUserId) {\n      models.SlackUser.create({\n        UserId: user.UserId,\n        SlackUserId\n      }).then((slackUser) => {\n        var user = models.User.find({\n          where: { id: slackUser.UserId },\n          include: [\n            models.SlackUser\n          ]\n        });\n        res.json(user);\n      })\n    } else {\n      res.json(user);\n    }\n  });\n\n});\n\n// read\nrouter.get('/:id', (req, res) => {\n\n  const { id } = req.params;\n\n  var user = models.User.find({\n    where: { id },\n    include: [\n      models.SlackUser\n    ]\n  }).then((user) => {\n    res.json(user); \n  });\n  \n});\n\n// update\nrouter.put('/:id', (req, res) => {\n});\n\n// delete\nrouter.delete('/:id', (req, res) => {\n});;\n\nexport default router;"]}