{"version":3,"sources":["../../../../src/bot/controllers/reminders/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import os from 'os';\nimport { wit } from '../index';\nimport moment from 'moment';\n\nimport models from '../../../app/models';\n\n// base controller for reminders\nexport default function(controller) {\n\n\t// get reminder\n\t// if user did not specify reminder, then go through conversational flow about it\n\tcontroller.hears(['custom_reminder'], 'direct_message', wit.hears, (bot, message) => {\n\n\t\t// these are array of objects\n\t\tconst { reminder, reminder_text, reminder_time, reminder_duration, custom_time, duration } = message.intentObject.entities;\n\t\tconst SlackUserId = message.user;\n\n\t\tvar config = {\n\t\t\treminder,\n\t\t\treminder_text,\n\t\t\treminder_time,\n\t\t\treminder_duration,\n\t\t\tcustom_time,\n\t\t\tduration,\n\t\t\tSlackUserId\n\t\t};\n\n\t\t// if reminder without a specific time, set to `wants_reminder`\n\t\tif (!reminder_duration && !reminder_time && !custom_time && !duration) {\n\t\t\tconsole.log(\"about to ask for reminder...\");\n\t\t\tconsole.log(config);\n\t\t\tcontroller.trigger(`ask_for_reminder`, [ bot, config ]);\n\t\t\treturn;\n\t\t} else {\n\t\t\t// user has already specified time\n\t\t\tcontroller.trigger(`set_reminder`, [ bot, config ]);\n\t\t}\n\n\t});\n\n\t// this is conversational flow to get reminder set\n\tcontroller.on(`ask_for_reminder`, (bot, config) => {\n\n\t\tconst { SlackUserId } = config;\n\n\t\tif (!SlackUserId) {\n\t\t\tconsole.log(\"NOT WORKING IN ask_for_reminder...\");\n\t\t\tconsole.log(config);\n\t\t\tconsole.log(\"\\n\\n\\n\\n\\n\");\n\t\t\treturn;\n\t\t}\n\n\t\tbot.startPrivateConversation({ user: SlackUserId }, (err, convo) => {\n\n\t\t\tconvo.reminderConfig = {\n\t\t\t\tSlackUserId\n\t\t\t};\n\n\t\t\tconvo.say(\"When would you like me to check in with you? :bellhop_bell: \");\n\t\t\tconvo.say(\"I can check in at a specific time, like `2:35pm`\");\n\t\t\tconvo.ask(\"I can also check in a certain number of minutes or hours from now, like `40 minutes` or `1 hour`\", (response, convo) => {\n\n\t\t\t\t// need some way to have a global quit functionality\n\t\t\t\tif (response.text == \"quit\" | response.text == \"cancel\") {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar { intentObject: { entities } } = response;\n\t\t\t\tconst { reminder, reminder_text, reminder_time, reminder_duration, duration, custom_time } = entities;\n\n\t\t\t\tconsole.log(\"huhh\");\n\t\t\t\tconsole.log(\"response:\");\n\t\t\t\tconsole.log(response);\n\n\t\t\t\tconsole.log(\"\\n\\n\\n\");\n\t\t\t\tconsole.log(JSON.stringify(response));\n\n\t\t\t\t// if user enters duration\n\t\t\t\tif (reminder_duration) {\n\t\t\t\t\tconvo.reminderConfig.reminder_duration = reminder_duration;\n\t\t\t\t} else if (duration){\n\t\t\t\t\tconvo.reminderConfig.reminder_duration = duration;\n\t\t\t\t}\n\n\t\t\t\t// if user enters a time\n\t\t\t\tif (reminder_time) {\n\t\t\t\t\tconvo.reminderConfig.reminder_time = reminder_time;\n\t\t\t\t} else if (custom_time) {\n\t\t\t\t\tconvo.reminderConfig.reminder_time = custom_time;\n\t\t\t\t}\n\n\t\t\t\tconvo.say(\"Excellent! Would you like me to remind you about anything when I check in?\");\n\t\t\t\tconvo.ask(\"You can leave any kind of one-line note, like `call Kevin` or `follow up with Taylor about design feedback`\", [\n\t\t\t\t\t{\n\t\t\t\t\t\tpattern: bot.utterances.yes,\n\t\t\t\t\t\tcallback: (response, convo) => {\n\t\t\t\t\t\t\tconvo.ask(`What note would you like me to remind you about?`, (response, convo) => {\n\t\t\t\t\t\t\t\tconsole.log(\"RESPONSE TEXTT\");\n\t\t\t\t\t\t\t\tconsole.log(response);\n\t\t\t\t\t\t\t\tconsole.log(\"\\n\\n\\n\\n\\n\");\n\t\t\t\t\t\t\t\tconvo.reminderConfig.reminder_text = [{value:response.text}];\n\t\t\t\t\t\t\t\tconvo.next();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tconvo.next();\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tpattern: bot.utterances.no,\n\t\t\t\t\t\tcallback: (response, convo) => {\n\t\t\t\t\t\t\tconvo.next();\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdefault: true,\n\t\t\t\t\t\tcallback: (response, convo) => {\n\t\t\t\t\t\t\tconsole.log(\"RESPONSE TEXTT\");\n\t\t\t\t\t\t\t\tconsole.log(response);\n\t\t\t\t\t\t\t\tconsole.log(\"\\n\\n\\n\\n\\n\");\n\t\t\t\t\t\t\tconvo.reminderConfig.reminder_text = [{value:response.text}];\n\t\t\t\t\t\t\tconvo.next();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]);\n\t\t\t\tconvo.next();\n\t\t\t});\n\t\t\tconvo.on('end', (convo) => {\n\t\t\t\tvar config = convo.reminderConfig;\n\t\t\t\tconsole.log(\"CONFIG ON FINISH:\");\n\t\t\t\tconsole.log(config);\n\t\t\t\tconsole.log(\"\\n\\n\\n\\n\\n\")\n\t\t\t\tcontroller.trigger(`set_reminder`, [ bot, config ]);\n\t\t\t})\n\t\t});\n\n\t});\n\n\t// the actual setting of reminder\n\tcontroller.on(`set_reminder`, (bot, config) => {\n\n\t\tconst { SlackUserId, reminder, reminder_text, reminder_time, reminder_duration, custom_time, duration } = config;\n\n\t\tvar now = moment();\n\n\t\t// get custom note\n\t\tvar customNote = null;\n\t\tif (reminder_text) {\n\t\t\tcustomNote = reminder_text[0].value;\n\t\t} else if (reminder) {\n\t\t\tcustomNote = reminder[0].value;\n\t\t}\n\n\t\tvar remindTimeStamp; // for the message (`h:mm a`)\n\t\tvar remindTimeStampForDB; // for DB (`YYYY-MM-DD HH:mm:ss`)\n\t\tif (reminder_duration || duration) { // i.e. ten more minutes\n\t\t\tconsole.log(\"inside of reminder_duration\\n\\n\\n\\n\");\n\t\t\tvar reminderDuration = reminder_duration ? reminder_duration : duration;\n\t\t\tvar durationSeconds = 0;\n\t\t\tfor (var i = 0; i < reminderDuration.length; i++) {\n\t\t\t\tdurationSeconds += reminderDuration[i].normalized.value;\n\t\t\t}\n\t\t\tvar durationMinutes = Math.floor(durationSeconds / 60);\n\n\t\t\tremindTimeStamp = now.add(durationSeconds, 'seconds');\n\t\t\t\n\t\t} else if (reminder_time || custom_time) { // i.e. `at 3pm`\n\t\t\tconsole.log(\"inside of reminder_time\\n\\n\\n\\n\");\n\t\t\tremindTimeStamp = reminder_time ? reminder_time[0].value : custom_time[0].value;\n\t\t\tremindTimeStamp = moment(remindTimeStamp); // in PST because of Wit default settings\n\n\t\t\tremindTimeStamp.add(remindTimeStamp._tzm - now.utcOffset(), 'minutes'); // convert from PST to local TZ\n\t\t}\n\n\t\tif (remindTimeStamp) {\n\t\t\t// insert into DB and send message\n\t\t\tremindTimeStampForDB = remindTimeStamp.format('YYYY-MM-DD HH:mm:ss');\n\t\t\tremindTimeStamp      = remindTimeStamp.format('h:mm a');\n\n\t\t\t// find user then reply\n\t\t\tmodels.SlackUser.find({\n\t\t\t\twhere: { SlackUserId }\n\t\t\t})\n\t\t\t.then((slackUser) => {\n\t\t\t\tmodels.Reminder.create({\n\t\t\t\t\tremindTime: remindTimeStampForDB,\n\t\t\t\t\tUserId: slackUser.UserId,\n\t\t\t\t\tcustomNote\n\t\t\t\t})\n\t\t\t\t.then((reminder) => {\n\t\t\t\t\tbot.startPrivateConversation({ user: SlackUserId }, (err, convo) => {\n\t\t\t\t\t\tconvo.say( `Okay, :alarm_clock: set. See you at ${remindTimeStamp}!`);\n\t\t\t\t\t\tconvo.next();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\n\n\t\t\t/**\n\t\t\t * \t\t\tTERRIBLE CODE BELOW\n\t\t\t * \t\t\t\tTHIS MEANS A BUG HAPPENED\n\t\t\t * \t~~\tHOPEFULLY THIS NEVER COMES UP EVER ~~\n\t\t\t */\n\n\t\t\t// this means bug happened\n\t\t\t// hopefully this never comes up\n\t\t\tbot.startPrivateConversation({ user: SlackUserId }, (err, convo) => {\n\t\t\t\tconvo.ask(\"Sorry, still learning :dog:. Please let me know the time that you want a reminder `i.e. 4:51pm`\", (response, convo) => {\n\n\t\t\t\t\tvar { intentObject: { entities } } = response;\n\t\t\t\t\tconst { reminder, reminder_text, reminder_time, reminder_duration, duration, custom_time } = entities;\n\n\t\t\t\t\tvar remindTime = '';\n\t\t\t\t\t// if user enters a time\n\t\t\t\t\tif (reminder_time) {\n\t\t\t\t\t\tremindTime = reminder_time;\n\t\t\t\t\t} else if (custom_time) {\n\t\t\t\t\t\tremindTime = custom_time;\n\t\t\t\t\t}\n\n\t\t\t\t\tremindTimeStamp = remindTime[0].value;\n\t\t\t\t\tremindTimeStamp = moment(remindTimeStamp); // in PST because of Wit default settings\n\n\t\t\t\t\tremindTimeStamp.add(remindTimeStamp._tzm - now.utcOffset(), 'minutes'); // convert from PST to local TZ\n\t\t\t\t\t// insert into DB and send message\n\t\t\t\t\tremindTimeStampForDB = remindTimeStamp.format('YYYY-MM-DD HH:mm:ss');\n\t\t\t\t\tremindTimeStamp      = remindTimeStamp.format('h:mm a');\n\n\t\t\t\t\t// find user then reply\n\t\t\t\t\tmodels.SlackUser.find({\n\t\t\t\t\t\twhere: { SlackUserId }\n\t\t\t\t\t})\n\t\t\t\t\t.then((slackUser) => {\n\t\t\t\t\t\tmodels.Reminder.create({\n\t\t\t\t\t\t\tremindTime: remindTimeStampForDB,\n\t\t\t\t\t\t\tUserId: slackUser.UserId,\n\t\t\t\t\t\t\tcustomNote\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then((reminder) => {\n\t\t\t\t\t\t\tbot.startPrivateConversation({ user: SlackUserId }, (err, convo) => {\n\t\t\t\t\t\t\t\tconvo.say( `Okay, :alarm_clock: set. See you at ${remindTimeStamp}!`);\n\t\t\t\t\t\t\t\tconvo.next();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\t});\n\t\t\t});\n\n\t\t}\n\n\t\t\n\n\t});\n\n\n}\n"]}