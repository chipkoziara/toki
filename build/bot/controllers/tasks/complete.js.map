{"version":3,"sources":["../../../../src/bot/controllers/tasks/complete.js"],"names":[],"mappings":";;;;;;kBAce,UAAS,UAAT,EAAqB;;AAEnC,YAAW,KAAX,CAAiB,CAAC,gBAAD,CAAjB,EAAqC,gBAArC,EAAuD,WAAI,KAA3D,EAAkE,UAAC,GAAD,EAAM,OAAN,EAAkB;;AAEnF,MAAM,cAAc,QAAQ,IAA5B;AACA,MAAI,UAAgB,QAAQ,OAA5B;;AAEA,MAAI,IAAJ,CAAS;AACR,SAAM,QADE;AAER,YAAS,QAAQ;AAFT,GAAT;;AAKA,UAAQ,GAAR,CAAY,2CAAZ;;AAEA,aAAW,YAAM;;AAEhB,oBAAO,IAAP,CAAY,IAAZ,CAAiB;AAChB,WAAO,kCAAkC,WAAlC,CADS;AAEhB,aAAS,CACR,iBAAO,SADC;AAFO,IAAjB,EAMC,IAND,CAMM,UAAC,IAAD,EAAU;;;AAGf,QAAI,kBAAkB,wBAAS,QAAT,CAAkB,EAAlB,EAAsB,OAAtB,EAA+B,MAA/B,CAAsC,qBAAtC,CAAtB;;AAEA,SAAK,aAAL,CAAmB;AAClB,YAAO,iFAAiF,eAAjF,EAAkG,KAAlG,EAAyG,MAAzG,CADW;AAElB,cAAS,CAAE,iBAAO,IAAT,CAFS;AAGlB;AAHkB,KAAnB,EAKC,IALD,CAKM,UAAC,UAAD,EAAgB;;AAErB,kBAAa,oDAA+B,UAA/B,EAA2C,OAA3C,CAAb;AACA,SAAI,kBAAkB,mDAA8B,UAA9B,CAAtB;;AAEA,SAAI,OAAc,KAAK,QAAL,IAAiB,KAAK,KAAxC;AACA,SAAI,cAAc,KAAK,SAAL,CAAe,WAAjC;AACA,SAAI,SAAc,KAAK,EAAvB;;AAEA,SAAI,wBAAJ,CAA8B,EAAE,MAAM,WAAR,EAA9B,EAAqD,UAAC,GAAD,EAAM,KAAN,EAAgB;;AAEpE,YAAM,IAAN,GAAa,IAAb;AACA,YAAM,aAAN,GAAsB;AACrB,uBAAgB;AADK,OAAtB;;AAIA,cAAQ,GAAR,CAAY,gDAAZ;AACA,cAAQ,GAAR,CAAY,UAAZ;;AAEA,mBAAa,oDAA+B,UAA/B,EAA2C,OAA3C,CAAb;AACA,YAAM,aAAN,CAAoB,UAApB,GAAiC,UAAjC;;AAEA,YAAM,GAAN,CAAU,0DAAV,EAAsE,CACrE;AACC,gBAAS,IAAI,UAAJ,CAAe,GADzB;AAEC,iBAAU,kBAAC,QAAD,EAAW,KAAX,EAAqB;AAC9B,gCAAwB,QAAxB,EAAkC,KAAlC;AACA,cAAM,IAAN;AACA;AALF,OADqE,EAQrE;AACC,gBAAS,IAAI,UAAJ,CAAe,EADzB;AAEC,iBAAU,kBAAC,QAAD,EAAW,KAAX,EAAqB;AAC9B,cAAM,GAAN,CAAU,sBAAV;AACA,cAAM,IAAN;AACA;AALF,OARqE,CAAtE;;;AAkBE,YAAM,EAAN,CAAS,KAAT,EAAgB,UAAC,KAAD,EAAW;AAAA,WAElB,cAFkB,GAEC,MAAM,aAFP,CAElB,cAFkB;;;AAI1B,WAAI,MAAM,MAAN,IAAgB,WAApB,EAAiC;;AAEhC,YAAI,eAAe,MAAf,GAAwB,CAA5B,EAA+B;;;AAGhC,wBAAe,OAAf,CAAuB,UAAC,SAAD,EAAe;AACrC,kBAAQ,GAAR,CAAY,4BAAZ;AACA,kBAAQ,GAAR,CAAY,SAAZ;AACA,kBAAQ,GAAR,CAAY,UAAZ;AAHqC,cAI7B,UAJ6B,GAId,SAJc,CAI7B,UAJ6B;;AAKrC,cAAI,UAAJ,EAAgB;AAAA,eACP,EADO,GACA,UADA,CACP,EADO;;AAEf,4BAAO,SAAP,CAAiB,IAAjB,CAAsB;AACrB,mBAAO,EAAE,MAAF,EADc;AAErB,qBAAS,CAAE,iBAAO,IAAT;AAFY,YAAtB,EAIC,IAJD,CAIM,UAAC,SAAD,EAAe;AACpB,gBAAI,OAAO,UAAU,IAArB;AACA,mBAAO,KAAK,MAAL,CAAY;AAClB,mBAAM;AADY,aAAZ,CAAP;AAGA,YATD,EAUC,IAVD,CAUM,UAAC,IAAD,EAAU;;AAEf,6BAAO,SAAP,CAAiB,OAAjB,CAAyB;AACxB,oBAAO,8GAA8G,eAA9G,EAA+H,KAA/H,EAAsI,MAAtI,EAA8I,MAA9I,CADiB;AAExB,sBAAS,CAAE,iBAAO,IAAT;AAFe,aAAzB,EAIC,IAJD,CAIM,UAAC,UAAD,EAAgB;AACrB,iBAAI,wBAAJ,CAA6B,EAAE,MAAM,WAAR,EAA7B,EAAoD,UAAC,GAAD,EAAM,KAAN,EAAgB;;AAEnE,2BAAa,oDAA+B,UAA/B,EAA2C,OAA3C,CAAb;AACA,kBAAI,kBAAkB,mDAA8B,UAA9B,CAAtB;;AAEA,oBAAM,GAAN,CAAU,+CAAV;AACA,oBAAM,GAAN,CAAU,eAAV;AACA,oBAAM,IAAN;AAEA,cATD;AAUA,aAfD;AAiBA,YA7BD;AA8BA;AACD,UAtCD;AA0CE;AAED,QAjDD,MAiDO;;AAER,YAAI,wBAAJ,CAA6B,EAAE,MAAM,WAAR,EAA7B,EAAoD,UAAC,GAAD,EAAM,KAAN,EAAgB;AACnE,eAAM,GAAN,CAAU,iEAAV;AACA,eAAM,IAAN;AACA,SAHD;AAIE;AACD,OA5DD;AA6DF,MA5FD;AA8FA,KA5GD;AA6GA,IAxHD;AAyHA,GA3HD,EA2HG,IA3HH;AA4HA,EAxID;AAyIA,C;;AAzJD;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AAEA;;AACA;;;;AAEA,IAAM,cAAc,MAApB;;;AA8IC;;;AAGD,SAAS,uBAAT,CAAiC,QAAjC,EAA2C,KAA3C,EAAkD;AAAA,KAEzC,UAFyC,GAE1B,MAAM,aAFoB,CAEzC,UAFyC;;AAGjD,KAAI,kBAAkB,mDAA8B,UAA9B,CAAtB;;AAEA,OAAM,GAAN,CAAU,2EAAV;AACA,OAAM,GAAN,CAAU,eAAV,EAA2B,UAAC,QAAD,EAAW,KAAX,EAAqB;;AAE/C,MAAI,6BAA6B,SAAS,IAA1C;AAF+C,MAGvC,UAHuC,GAGxB,MAAM,aAHkB,CAGvC,UAHuC;;;;AAM/C,MAAI,YAAY,KAAhB;AACA,MAAI,gBAAgB,IAAI,MAAJ,CAAW,IAAX,CAApB;AACA,+BAA6B,2BAA2B,KAA3B,CAAiC,GAAjC,EAAsC,GAAtC,CAA0C,UAAC,KAAD,EAAW;AACjF,WAAQ,MAAM,IAAN,EAAR;AACA,OAAI,cAAc,SAAS,KAAT,CAAlB;AACA,OAAI,cAAc,IAAd,CAAmB,KAAnB,KAA6B,cAAc,WAAW,MAA1D,EACC,YAAY,IAAZ;AACD,UAAO,WAAP;AACA,GAN4B,CAA7B;;AAQA,MAAI,SAAJ,EAAe;AACd,SAAM,GAAN,CAAU,kEAAV;AACA,GAFD,MAEO;AACN,SAAM,GAAN,CAAU,oBAAV;AACA,OAAI,yBAAyB,EAA7B;AACA,8BAA2B,OAA3B,CAAoC,iBAAS;AAC5C,QAAI,QAAQ,CAAZ,EAAe;AACd,a;AACA,4BAAuB,IAAvB,CAA4B,KAA5B;AACA;AACD,IALD;;AAOA,OAAI,qBAAqB,EAAzB;AACA,0BAAuB,OAAvB,CAA+B,UAAC,KAAD,EAAW;AACzC,uBAAmB,IAAnB,CAAwB,WAAW,KAAX,CAAxB;AACA,IAFD;;AAIA,SAAM,aAAN,CAAoB,cAApB,GAAqC,kBAArC;AAEA;;AAED,QAAM,IAAN;AAEA,EAvCD;AAwCA","file":"complete.js","sourcesContent":["import os from 'os';\nimport { wit } from '../index';\nimport http from 'http';\nimport bodyParser from 'body-parser';\nimport moment from 'moment';\n\nimport models from '../../../app/models';\n\nimport { randomInt } from '../../lib/botResponses';\nimport { convertToSingleTaskObjectArray, convertArrayToTaskListMessage } from '../../lib/messageHelpers';\n\nconst FINISH_WORD = 'done';\n\n// completed task controller\nexport default function(controller) {\n\n\tcontroller.hears(['completed_task'], 'direct_message', wit.hears, (bot, message) => {\n\n\t\tconst SlackUserId = message.user;\n\t\tvar channel       = message.channel;\n\n\t\tbot.send({\n\t\t\ttype: \"typing\",\n\t\t\tchannel: message.channel\n\t\t});\n\n\t\tconsole.log(\"\\n\\n\\n\\n ~~ in completed task ~~ \\n\\n\\n\\n\");\n\n\t\tsetTimeout(() => {\n\t\t\t// find user then get tasks\n\t\t\tmodels.User.find({\n\t\t\t\twhere: [`\"SlackUser\".\"SlackUserId\" = ?`, SlackUserId ],\n\t\t\t\tinclude: [\n\t\t\t\t\tmodels.SlackUser\n\t\t\t\t]\n\t\t\t})\n\t\t\t.then((user) => {\n\n\t\t\t\t// temporary fix to get tasks\n\t\t\t\tvar timeAgoForTasks = moment().subtract(14, 'hours').format(\"YYYY-MM-DD HH:mm:ss\");\n\n\t\t\t\tuser.getDailyTasks({\n\t\t\t\t\twhere: [`\"DailyTask\".\"createdAt\" > ? AND \"Task\".\"done\" = ? AND \"DailyTask\".\"type\" = ?`, timeAgoForTasks, false, \"live\"],\n\t\t\t\t\tinclude: [ models.Task ],\n\t\t\t\t\torder: `\"DailyTask\".\"priority\" ASC`\n\t\t\t\t})\n\t\t\t\t.then((dailyTasks) => {\n\n\t\t\t\t\tdailyTasks = convertToSingleTaskObjectArray(dailyTasks, \"daily\");\n\t\t\t\t\tvar taskListMessage = convertArrayToTaskListMessage(dailyTasks);\n\n\t\t\t\t\tvar name        = user.nickName || user.email;\n\t\t\t\t\tvar SlackUserId = user.SlackUser.SlackUserId;\n\t\t\t\t\tvar UserId      = user.id;\n\n\t\t\t\t\tbot.startPrivateConversation ({ user: SlackUserId }, (err, convo) => {\n\n\t\t\t\t\t\tconvo.name = name;\n\t\t\t\t\t\tconvo.tasksComplete = {\n\t\t\t\t\t\t\tcompletedTasks: []\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconsole.log(\"\\n\\n ~~~ DAILY TASKS IN COMPLETE TASKS ~~ \\n\\n\");\n\t\t\t\t\t\tconsole.log(dailyTasks);\n\n\t\t\t\t\t\tdailyTasks = convertToSingleTaskObjectArray(dailyTasks, \"daily\");\n\t\t\t\t\t\tconvo.tasksComplete.dailyTasks = dailyTasks;\n\n\t\t\t\t\t\tconvo.ask(\"Did you want to check off some tasks? :heavy_check_mark:\", [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpattern: bot.utterances.yes,\n\t\t\t\t\t\t\t\tcallback: (response, convo) => {\n\t\t\t\t\t\t\t\t\taskWhichTasksToComplete(response, convo);\n\t\t\t\t\t\t\t\t\tconvo.next();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpattern: bot.utterances.no,\n\t\t\t\t\t\t\t\tcallback: (response, convo) => {\n\t\t\t\t\t\t\t\t\tconvo.say(\"Oh, never mind then!\");\n\t\t\t\t\t\t\t\t\tconvo.next();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]);\n\n\t\t\t\t\t\t// on finish conversation\n\t\t    \t\tconvo.on('end', (convo) => {\n\n\t\t    \t\t\tconst { completedTasks } = convo.tasksComplete;\n\n\t\t    \t\t\tif (convo.status == 'completed') {\n\n\t\t    \t\t\t\tif (completedTasks.length > 0) {\n\n\t\t    \t\t\t\t\t// put logic here\n\t\t\t\t\t\t\t\t\tcompletedTasks.forEach((dailyTask) => {\n\t\t\t\t\t\t\t\t\t\tconsole.log(\"\\n\\nCompleted Task!:\\n\\n\\n\");\n\t\t\t\t\t\t\t\t\t\tconsole.log(dailyTask);\n\t\t\t\t\t\t\t\t\t\tconsole.log(\"\\n\\n\\n\\n\");\n\t\t\t\t\t\t\t\t\t\tconst { dataValues } = dailyTask;\n\t\t\t\t\t\t\t\t\t\tif (dataValues) {\n\t\t\t\t\t\t\t\t\t\t\tconst { id } = dataValues;\n\t\t\t\t\t\t\t\t\t\t\tmodels.DailyTask.find({\n\t\t\t\t\t\t\t\t\t\t\t\twhere: { id },\n\t\t\t\t\t\t\t\t\t\t\t\tinclude: [ models.Task ]\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t.then((dailyTask) => {\n\t\t\t\t\t\t\t\t\t\t\t\tvar task = dailyTask.Task;\n\t\t\t\t\t\t\t\t\t\t\t\treturn task.update({\n\t\t\t\t\t\t\t\t\t\t\t\t\tdone: true\n\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t.then((task) => {\n\n\t\t\t\t\t\t\t\t\t\t\t\tmodels.DailyTask.findAll({\n\t\t\t\t\t\t\t\t\t\t\t\t\twhere: [`\"DailyTask\".\"createdAt\" > ? AND \"Task\".\"done\" = ? AND \"DailyTask\".\"type\" = ? AND \"DailyTask\".\"UserId\" = ?`, timeAgoForTasks, false, \"live\", UserId],\n\t\t\t\t\t\t\t\t\t\t\t\t\tinclude: [ models.Task ]\n\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t.then((dailyTasks) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tbot.startPrivateConversation({ user: SlackUserId }, (err, convo) => {\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdailyTasks = convertToSingleTaskObjectArray(dailyTasks, \"daily\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar taskListMessage = convertArrayToTaskListMessage(dailyTasks);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconvo.say(\"Here's what your outstanding tasks look like:\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconvo.say(taskListMessage);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconvo.next();\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t    \t\t\t\t}\n\n\t\t    \t\t\t} else {\n\t\t    \t\t\t\t// default premature end\n\t\t\t\t\t\t\t\tbot.startPrivateConversation({ user: SlackUserId }, (err, convo) => {\n\t\t\t\t\t\t\t\t\tconvo.say(\"Okay! Exiting now. Let me know when you want to start your day!\");\n\t\t\t\t\t\t\t\t\tconvo.next();\n\t\t\t\t\t\t\t\t});\n\t\t    \t\t\t}\n\t\t    \t\t});\n\t\t\t\t\t});\n\n\t\t\t\t});\n\t\t\t})\n\t\t}, 1000);\n\t});\n};\n\n// ask which tasks to complete\nfunction askWhichTasksToComplete(response, convo) {\n\n\tconst { dailyTasks } = convo.tasksComplete;\n\tvar taskListMessage = convertArrayToTaskListMessage(dailyTasks);\n\n\tconvo.say(\"Which task(s) did you get done? Just write which number(s) like `3, 4, 1`\");\n\tconvo.ask(taskListMessage, (response, convo) => {\n\n\t\tvar initialCompleteTaskNumbers = response.text;\n\t\tconst { dailyTasks } = convo.tasksComplete;\n\n\t\t// either a non-number, or number > length of tasks\n\t\tvar isInvalid = false;\n\t\tvar nonNumberTest = new RegExp(/\\D/);\n\t\tinitialCompleteTaskNumbers = initialCompleteTaskNumbers.split(\",\").map((order) => {\n\t\t\torder = order.trim();\n\t\t\tvar orderNumber = parseInt(order);\n\t\t\tif (nonNumberTest.test(order) || orderNumber > dailyTasks.length)\n\t\t\t\tisInvalid = true;\n\t\t\treturn orderNumber;\n\t\t});\n\n\t\tif (isInvalid) {\n\t\t\tconvo.say(\"Oops, looks like you didn't put in valid numbers :thinking_face:\");\n\t\t} else {\n\t\t\tconvo.say(\"Great work :punch:\");\n\t\t\tvar completeTaskNumberList = [];\n\t\t\tinitialCompleteTaskNumbers.forEach((order => {\n\t\t\t\tif (order > 0) {\n\t\t\t\t\torder--; // 0-index based\n\t\t\t\t\tcompleteTaskNumberList.push(order);\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tvar completedTaskArray = [];\n\t\t\tcompleteTaskNumberList.forEach((order) => {\n\t\t\t\tcompletedTaskArray.push(dailyTasks[order]);\n\t\t\t});\n\n\t\t\tconvo.tasksComplete.completedTasks = completedTaskArray;\n\n\t\t}\n\n\t\tconvo.next();\n\n\t});\n}"]}