{"version":3,"sources":["../../../../src/bot/controllers/tasks/startDayFlow.js"],"names":[],"mappings":"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","file":"startDayFlow.js","sourcesContent":["import os from 'os';\nimport { wit } from '../index';\nimport http from 'http';\nimport bodyParser from 'body-parser';\n\nimport models from '../../../app/models';\n\nimport { randomInt } from '../../lib/botResponses';\nimport { convertResponseObjectsToTaskArray, convertArrayToTaskListMessage, convertTimeStringToMinutes } from '../../lib/messageHelpers';\n\nexport const FINISH_WORD = 'done';\nexport const EXIT_EARLY_WORDS = ['exit', 'stop','never mind','quit'];\n\n// base controller for tasks\nexport default function(controller) {\n\n\t// programattic trigger of day start\n\t// will lead to actual day start flow: `begin_day_flow`\n\tcontroller.on('trigger_day_start', (bot, config) => {\n\n\t\tconst { SlackUserId } = config;\n\n\t\tbot.startPrivateConversation({ user: SlackUserId }, (err, convo) => {\n\n\t\t\tconvo.say(\"hi! in trigger of day start flow\");\n\t\t\tconvo.next();\n\n\t\t});\n\n\t})\n\n\t/**\n\t* \t\tSTART OF YOUR DAY\n\t*\n\t* \t\task for today's tasks\n\t* \t\tprioritize tasks\n\t* \t\tset time to tasks\n\t* \t\tenter work session flow\n\t* \t\t\n\t*/\n\tcontroller.on('begin_day_flow', (bot, config) => {\n\n\t\tconst { SlackUserId } = config;\n\t\tbot.startPrivateConversation({ user: SlackUserId }, (err, convo) => {\n\n\t\tconvo.say(\"hi! this should be the actual start day flow\");\n\t\tconvo.next();\n\n\t\t});\n\n\t});\n\n\t// this is wit.ai and should trigger to `begin_day_flow`\n\tcontroller.hears(['start_day'], 'direct_message', wit.hears, (bot, message) => {\n\n\t\tconst SlackUserId = message.user;\n\n\t\t// find user then reply\n\t\tmodels.SlackUser.find({\n\t\t\twhere: { SlackUserId },\n\t\t\tinclude: [\n\t\t\t\tmodels.User\n\t\t\t]\n\t\t})\n\t\t.then((slackUser) => {\n\t\t\t\n\t\t\tbot.send({\n        type: \"typing\",\n        channel: message.channel\n\t    });\n\t    setTimeout(()=>{\n\t    \tbot.startConversation(message, (err, convo) => {\n\t    \t\tvar name = slackUser.User.nickName || slackUser.User.email;\n\n\t    \t\t// configure necessary properties on convo object\n\t    \t\tconvo.name = name;\n\n\t    \t\t// object with values that are important to me\n\t    \t\tconvo.dayStart = {\n\t    \t\t\tUserId: slackUser.User.id\n\t    \t\t};\n\n\t    \t\t// start the flow\n\t    \t\taskForDayTasks(err, convo);\n\n\t    \t\t// on finish conversation\n\t    \t\tconvo.on('end', (convo) => {\n\n    \t\t\t\tvar responses = convo.extractResponses();\n    \t\t\t\tconsole.log('done!')\n    \t\t\t\tconsole.log(responses);\n    \t\t\t\tconsole.log(\"here is day start object:\");\n    \t\t\t\tconsole.log(convo.dayStart);\n\n\t    \t\t\tif (convo.status == 'completed') {\n\n\t    \t\t\t\t// store the user's tasks\n\t    \t\t\t\tvar { UserId, prioritizedTaskArray } = convo.dayStart;\n\t    \t\t\t\tprioritizedTaskArray.forEach((task, index) => {\n\t    \t\t\t\t\tconst { text, minutes} = task;\n\t    \t\t\t\t\tvar priority = index + 1;\n\n\t    \t\t\t\t\tmodels.Task.create({\n\t\t\t\t\t\t\t    text\n\t\t\t\t\t\t\t  }).then((task) => {\n\t\t\t\t\t\t\t    models.DailyTask.create({\n\t\t\t\t\t\t\t      TaskId: task.id,\n\t\t\t\t\t\t\t      priority,\n\t\t\t\t\t\t\t      minutes,\n\t\t\t\t\t\t\t      UserId\n\t\t\t\t\t\t\t    });\n\t\t\t\t\t\t\t  });\n\t    \t\t\t\t});\n\n\t    \t\t\t\t// confirm completion of DAY_START flow\n\t    \t\t\t\tbot.reply(message,\"thx for finishing\");\n\n\n\t    \t\t\t\t// NEED TO TRIGGER SESSION_START HERE\n\n\t    \t\t\t} else {\n\t    \t\t\t\t// if convo gets ended prematurely\n\t    \t\t\t\tbot.reply(message,\"Okay! Exiting now. Let me know when you want to start your day\");\n\t    \t\t\t}\n\t    \t\t});\n\n\t    \t});\n\t    }, randomInt(1000, 1750));\n\t\t});\n\n\t});\n\n};\n\n// user just started conersation and is entering tasks\nfunction askForDayTasks(response, convo){\n\n\tconst { task }                = convo;\n\tconst { bot, source_message } = task;\n\n\tconsole.log(\"in ask for day tasks\");;\n\tconsole.log(convo.name);\n\n\tconvo.say(`Hey ${convo.name}! What tasks would you like to work on today? :pencil:`);\n\tconvo.say(`You can enter everything in one line separated by commas, or send me each task in a separate line`);\n\tconvo.ask(`Then just tell me when you're done by saying \\`${FINISH_WORD}\\``, (response, convo) => {\n\n\t\tfor (var i = 0; i < EXIT_EARLY_WORDS.length; i++) {\n\t\t\tconsole.log(`in exit early words loop! ${EXIT_EARLY_WORDS[i]}`);\n\t\t\tif (response.text == EXIT_EARLY_WORDS[i])\n\t\t\t\tconvo.stop();\n\t\t}\n\n\t\tconsole.log(`response is`);\n\t\tconsole.log(response);\n\t\tif (response.text == FINISH_WORD) {\n\t\t\tconvo.say(\"Awesome! You can always add more tasks later by telling me, `I'd like to add a task` or something along those lines :grinning:\");\n\t\t\tdisplayTaskList(response, convo);\n\t\t\tconvo.next();\n\t\t}\n\t}, { 'key' : 'tasks', 'multiple': true});\n\n}\n\n// user has just entered his tasks for us to display back\nfunction displayTaskList(response, convo) {\n\n\tconst { task }                = convo;\n\tconst { bot, source_message } = task;\n\n\tvar { tasks } = convo.responses;\n\n\tvar tasks = convo.responses.tasks;\n\tvar taskArray = convertResponseObjectsToTaskArray(tasks);\n\n\t// taskArray is now attached to convo\n\tconvo.dayStart.taskArray = taskArray;\n\n\tconsole.log(\"TASKS:\")\n\tconsole.log(taskArray);\n\n\tvar taskListMessage = convertArrayToTaskListMessage(taskArray);\n\n\t// we need to prioritize the task list here to display to user\n\tconvo.say(`Now, please rank your tasks in order of your priorities today`);\n\tconvo.say(taskListMessage);\n\tconvo.ask(`You can just list the numbers, like \\`3, 4, 1, 2, 5\\``, (response, convo) => {\n\t\tprioritizeTaskList(response, convo);\n\t\tconvo.next();\n\t}, { 'key' : 'taskPriorities' });\n\t\n}\n\n// user has listed `5, 4, 2, 1, 3` for priorities to handle here\nfunction prioritizeTaskList(response, convo) {\n\n\tconst { task }                = convo;\n\tconst { bot, source_message } = task;\n\n\t// organize the task list!\n\tvar { taskArray } = convo.dayStart;\n\n\t// get user priority order (`1,4,3,2`), convert it to an array of ints, and use that to prioritize your array\n\tvar initialPriorityOrder = response.text;\n\t\n\t// either a non-number, or number > length of tasks\n\tvar isInvalid = false;\n\tvar nonNumberTest = new RegExp(/\\D/);\n\tinitialPriorityOrder = initialPriorityOrder.split(\",\").map((order) => {\n\t\torder = order.trim();\n\t\tvar orderNumber = parseInt(order);\n\t\tif (nonNumberTest.test(order) || orderNumber > taskArray.length)\n\t\t\tisInvalid = true;\n\t\treturn orderNumber;\n\t});\n\n\tif (isInvalid) {\n\t\tconvo.say(\"Oops, looks like you didn't put in valid numbers :thinking_face:. Let's try this again\");\n\t\tdisplayTaskList(response, convo);\n\t\treturn;\n\t}\n\n\tvar priorityOrder = [];\n\tinitialPriorityOrder.forEach(function(order) {\n\t\tif ( order > 0) {\n\t\t\torder--; // make user-entered numbers 0-index based\n\t\t\tpriorityOrder.push(order);\n\t\t}\n\t});\n\n\tvar prioritizedTaskArray = [];\n\tpriorityOrder.forEach((order) => {\n\t\tprioritizedTaskArray.push(taskArray[order]);\n\t})\n\n\tconvo.dayStart.prioritizedTaskArray = prioritizedTaskArray;\n\n\tvar taskListMessage = convertArrayToTaskListMessage(prioritizedTaskArray);\n\n\tconvo.say(\"Is this the right priority?\");\n\tconvo.ask(taskListMessage, [\n\t\t{\n\t\t\tpattern: bot.utterances.yes,\n\t\t\tcallback: (response, convo) => {\n\t\t\t\tconvo.say(\"Excellent! Last thing: how much time would you like to allocate to each task today?\");\n\t\t\t\tconvo.say(taskListMessage);\n\t\t\t\tgetTimeToTasks(response, convo);\n\t\t\t\tconvo.next();\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tpattern: bot.utterances.no,\n\t\t\tcallback: (response, convo) => {\n\n\t\t\t\tconvo.say(\"Whoops :banana: Let's try to do this again\");\n\t\t\t\tdisplayTaskList(response, convo);\n\t\t\t\tconvo.next();\n\n\t\t\t}\n\t\t}\n\t], { 'key' : 'confirmedRightPriority' });\n\n}\n\n// ask the question to get time to tasks\nfunction getTimeToTasks(response, convo) {\n\tconvo.ask(`Just say, \\`30, 40, 1 hour, 1hr 10 min, 15m\\` in order and I'll figure it out and assign those times to the tasks above :smiley:`, (response, convo) => {\n\t\tassignTimeToTasks(response, convo);\n\t\tconvo.next();\n\t}, { 'key' : 'timeToTasksResponse' });\n}\n\n// this is the work we do to actually assign time to tasks\nfunction assignTimeToTasks(response, convo) {\n\n\tconst { task }                = convo;\n\tconst { bot, source_message } = task;\n\tvar { prioritizedTaskArray }  = convo.dayStart;\n\n\tvar timeToTask = response.text;\n\n\t// need to check for invalid responses.\n\t// does not say minutes or hours, or is not right length\n\tvar isInvalid = false;\n\ttimeToTask = timeToTask.split(\",\");\n\tif (timeToTask.length != prioritizedTaskArray.length) {\n\t\tisInvalid = true;\n\t};\n\n\tvar validMinutesTester = new RegExp(/[\\dh]/);\n\ttimeToTask = timeToTask.map((time) => {\n\t\tif (!validMinutesTester.test(time)) {\n\t\t\tisInvalid = true;\n\t\t}\n\t\tvar minutes = convertTimeStringToMinutes(time);\n\t\treturn minutes;\n\t});\n\n\tprioritizedTaskArray = prioritizedTaskArray.map((task, index) => {\n\t\treturn {\n\t\t\t...task,\n\t\t\tminutes: timeToTask[index]\n\t\t}\n\t});\n\n\tconvo.dayStart.prioritizedTaskArray = prioritizedTaskArray;\n\tvar taskListMessage = convertArrayToTaskListMessage(prioritizedTaskArray);\n\n\t// INVALID tester\n\tif (isInvalid) {\n\t\tconvo.say(\"Oops, looks like you didn't put in valid times :thinking_face:. Let's try this again\");\n\t\tconvo.say(\"Send me the amount of time you'd like to work on each task above, separated by commas. The first time you list will represent the first task above, the second time you list will represent the second task, and on and on\");\n\t\tconvo.say(\"I'll assume you mean minutes - like `30` would be 30 minutes - unless you specify hours - like `2 hours`\");\n\t\tconvo.say(taskListMessage);\n\t\tgetTimeToTasks(response, convo);\n\t\treturn;\n\t}\n\n\tconvo.say(\"Are these times right?\");\n\tconvo.ask(taskListMessage, [\n\t\t{\n\t\t\tpattern: bot.utterances.yes,\n\t\t\tcallback: (response, convo) => {\n\t\t\t\tconvo.say(\"Boom! This looks great\");\n\t\t\t\tconvo.ask(\"Ready to start your first focused work session today?\", [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpattern: bot.utterances.yes,\n\t\t\t\t\t\t\tcallback: (response, convo) => {\n\t\t\t\t\t\t\t\tconvo.say(\"Great! It's time for the first session of the day. Let's get crackin :egg:\");\n\t\t\t\t\t\t\t\tconvo.dayStart.startFirstSession = true;\n\t\t\t\t\t\t\t\tconvo.next();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpattern: bot.utterances.no,\n\t\t\t\t\t\t\tcallback: (response, convo) => {\n\t\t\t\t\t\t\t\tconvo.say(\"Great! Let me know when you're ready to start\");\n\t\t\t\t\t\t\t\tconvo.say(\"Alternatively, you can ask me to remind you to start at a specific time, like `10am` or a relative time like `in 10 minutes`\");\n\t\t\t\t\t\t\t\tconvo.dayStart.startFirstSession = false;\n\t\t\t\t\t\t\t\tconvo.next();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t], { 'key' : 'startFirstSession' })\n\t\t\t\tconvo.next();\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tpattern: bot.utterances.no,\n\t\t\tcallback: (response, convo) => {\n\t\t\t\tconvo.say(\"Let's give this another try :repeat_one:\");\n\t\t\t\tconvo.say(\"Send me the amount of time you'd like to work on each task above, separated by commas. The first time you list will represent the first task above, the second time you list will represent the second task, and on and on\");\n\t\t\t\tconvo.say(\"I'll assume you mean minutes - like `30` would be 30 minutes - unless you specify hours - like `2 hours`\");\n\t\t\t\tconvo.ask(taskListMessage, (response, convo) => {\n\t\t\t\t\tassignTimeToTasks(response, convo);\n\t\t\t\t\tconvo.next();\n\t\t\t\t})\n\t\t\t\tconvo.next();\n\t\t\t}\n\t\t}\n\t]);\n\n}\n\n"]}