{"version":3,"sources":["../../../../src/bot/controllers/tasks/add.js"],"names":[],"mappings":";;;;;;;;kBAce,UAAS,UAAT,EAAqB;;;;;;AAMnC,YAAW,KAAX,CAAiB,CAAC,gBAAD,CAAjB,EAAqC,gBAArC,EAAuD,WAAI,KAA3D,EAAkE,UAAC,GAAD,EAAM,OAAN,EAAkB;;AAEnF,MAAM,cAAc,QAAQ,IAA5B;AACA,MAAI,SAAgB,kBAAa,QAAjC;AACA,MAAI,UAAgB,QAAQ,OAA5B;;AAEA,MAAI,SAAS;AACZ,iBADY;AAEZ;AAFY,GAAb;;AAKA,MAAI,IAAJ,CAAS;AACR,SAAM,QADE;AAER,YAAS,QAAQ;AAFT,GAAT;AAIA,aAAW,YAAM;AAChB,cAAW,OAAX,+BAAiD,CAAE,GAAF,EAAO,MAAP,CAAjD;AACA,GAFD,EAEG,IAFH;AAIA,EAnBD;;;;;AAwBA,YAAW,EAAX,kBAA+B,UAAC,GAAD,EAAM,MAAN,EAAiB;AAAA,MAEvC,WAFuC,GAEvB,MAFuB,CAEvC,WAFuC;;;;AAK/C,mBAAO,IAAP,CAAY,IAAZ,CAAiB;AAChB,UAAO,kCAAkC,WAAlC,CADS;AAEhB,YAAS,CACR,iBAAO,SADC;AAFO,GAAjB,EAMC,IAND,CAMM,UAAC,IAAD,EAAU;;;AAGf,OAAM,SAAS,KAAK,EAApB;;AAEA,QAAK,gBAAL,CAAsB;AACrB,4CADqB;AAErB,WAAO;AAFc,IAAtB,EAIC,IAJD,CAIM,UAAC,aAAD,EAAmB;;;;AAIrB,QAAM,oBAAsB,cAAc,CAAd,CAA5B,C;AACH,QAAI,wBAAwB,kBAAkB,UAAlB,CAA6B,SAAzD;;AAEA,SAAK,aAAL,CAAmB;AAClB,YAAO,iFAAiF,qBAAjF,EAAwG,KAAxG,EAA+G,MAA/G,CADW;AAElB,cAAS,CAAE,iBAAO,IAAT,CAFS;AAGlB;AAHkB,KAAnB,EAKC,IALD,CAKM,UAAC,UAAD,EAAgB;;AAErB,SAAI,OAAS,KAAK,QAAL,IAAiB,KAAK,KAAnC;AACA,SAAI,cAAc,KAAK,SAAL,CAAe,WAAjC;;AAEA,SAAI,wBAAJ,CAA8B,EAAE,MAAM,WAAR,EAA9B,EAAqD,UAAC,GAAD,EAAM,KAAN,EAAgB;;AAEpE,YAAM,IAAN,GAAa,IAAb;AACA,YAAM,QAAN,GAAiB;AAChB;AADgB,OAAjB;;AAIA,mBAAa,oDAA+B,UAA/B,EAA2C,OAA3C,CAAb;AACA,YAAM,QAAN,CAAe,UAAf,GAA8B,UAA9B;;AAEA,0BAAoB,GAApB,EAAyB,KAAzB;;;AAGE,YAAM,EAAN,CAAS,KAAT,EAAgB,UAAC,KAAD,EAAW;;AAE1B,eAAQ,GAAR,CAAY,kDAAZ;;AAED,WAAI,YAAY,MAAM,gBAAN,EAAhB;AAJ2B,WAKnB,QALmB,GAKN,KALM,CAKnB,QALmB;;;AAO1B,WAAI,MAAM,MAAN,IAAgB,WAApB,EAAiC;;;AAAA,YAGxB,WAHwB,GAGa,QAHb,CAGxB,UAHwB;AAAA,YAGZ,oBAHY,GAGa,QAHb,CAGZ,oBAHY;;;;AAMhC,oBAAW,OAAX,CAAmB,UAAC,SAAD,EAAe;AAAA,aACzB,EADyB,GAClB,UAAU,UADQ,CACzB,EADyB;;AAEjC,iBAAQ,GAAR,oCAA6C,EAA7C;AACA,0BAAO,SAAP,CAAiB,MAAjB,CAAwB;AACvB,gBAAM;AADiB,UAAxB,EAEE;AACD,iBAAO,EAAE,MAAF;AADN,UAFF;AAKA,SARD;;;;;AAaA,6BAAqB,OAArB,CAA6B,UAAC,SAAD,EAAY,KAAZ,EAAsB;AAAA,aAE1C,UAF0C,GAE3B,SAF2B,CAE1C,UAF0C;;AAGlD,aAAI,cAAc,QAAQ,CAA1B;;AAEA,aAAI,UAAJ,EAAgB;;AAEf,kBAAQ,GAAR,CAAY,gCAAZ;AACA,kBAAQ,GAAR,CAAY,UAAU,UAAtB;AACA,kBAAQ,GAAR,eAAwB,MAAxB;AACA,kBAAQ,GAAR,CAAY,UAAZ;;;AALe,cAQP,EARO,GAQS,UART,CAQP,EARO;AAAA,cAQH,OARG,GAQS,UART,CAQH,OARG;;AASf,2BAAO,SAAP,CAAiB,MAAjB,CAAwB;AACvB,2BADuB;AAEvB,yBAFuB;AAGvB,qBAAU,WAHa;AAIvB,iBAAM;AAJiB,WAAxB,EAKG;AACF,kBAAO,EAAE,MAAF;AADL,WALH;AASA,UAlBD,MAkBO;AAAA;;AAEN,mBAAQ,GAAR,CAAY,4BAAZ;AACA,mBAAQ,GAAR,CAAY,SAAZ;AACA,mBAAQ,GAAR,eAAwB,MAAxB;AACA,mBAAQ,GAAR,CAAY,UAAZ;;;AALM,eAQE,IARF,GAQoB,SARpB,CAQE,IARF;AAAA,eAQQ,OARR,GAQoB,SARpB,CAQQ,OARR;;AASN,4BAAO,IAAP,CAAY,MAAZ,CAAmB;AAClB;AADkB,YAAnB,EAGC,IAHD,CAGM,UAAC,IAAD,EAAU;AACf,6BAAO,SAAP,CAAiB,MAAjB,CAAwB;AACvB,qBAAQ,KAAK,EADU;AAEvB,uBAAU,WAFa;AAGvB,6BAHuB;AAIvB;AAJuB,aAAxB;AAMA,YAVD;AATM;AAoBN;AAED,SA7CD;AA+CA,QAlED,MAkEO;;AAEN,YAAI,wBAAJ,CAA6B,EAAE,MAAM,WAAR,EAA7B,EAAoD,UAAC,GAAD,EAAM,KAAN,EAAgB;AACrE,eAAM,GAAN,CAAU,kDAAV;AACA,eAAM,IAAN;AACA,SAHC;AAKA;AACD,OAjFD;AAkFF,MA/FD;AAgGA,KA1GD;AA2GA,IAtHD;AAuHA,GAlID;AAmIA,EAxID;AA0IA,C;;AAtLD;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AAEA;;AACA;;;;;;AAEA,IAAM,cAAc,MAApB;;;AA2KC;;;AAGD,SAAS,mBAAT,CAA6B,QAA7B,EAAuC,KAAvC,EAA8C;AAAA,KAErC,IAFqC,GAEb,KAFa,CAErC,IAFqC;AAAA,KAE/B,IAF+B,GAEb,KAFa,CAE/B,IAF+B;AAAA,KAGrC,GAHqC,GAGb,IAHa,CAGrC,GAHqC;AAAA,KAGhC,cAHgC,GAGb,IAHa,CAGhC,cAHgC;AAAA,KAIvC,UAJuC,GAIb,MAAM,QAJO,CAIvC,UAJuC;;;AAM7C,KAAI,kBAAkB,mDAA8B,UAA9B,CAAtB;;AAEA,KAAI,WAAW,MAAX,GAAoB,CAAxB,EAA2B;AAC1B,QAAM,GAAN;AACA,QAAM,GAAN,CAAU,eAAV;AACA;;AAED,OAAM,GAAN;AACA,OAAM,GAAN;;AAEA,OAAM,GAAN,qDAA4D,WAA5D,SAA8E,UAAC,QAAD,EAAW,KAAX,EAAqB;;AAElG,MAAI,SAAS,IAAT,IAAiB,WAArB,EAAkC;AACjC,qBAAkB,QAAlB,EAA4B,KAA5B;AACA,SAAM,IAAN;AACA;AAED,EAPD,EAOG,EAAE,OAAQ,UAAV,EAAsB,YAAY,IAAlC,EAPH;AASA;;;AAGD,SAAS,iBAAT,CAA2B,QAA3B,EAAqC,KAArC,EAA4C;AAAA,KAEnC,IAFmC,GAEX,KAFW,CAEnC,IAFmC;AAAA,KAGnC,GAHmC,GAGX,IAHW,CAGnC,GAHmC;AAAA,KAG9B,cAH8B,GAGX,IAHW,CAG9B,cAH8B;AAAA,KAIrC,QAJqC,GAIX,MAAM,SAJK,CAIrC,QAJqC;;;AAM3C,KAAI,gBAA2B,uDAAkC,QAAlC,CAA/B;AACA,OAAM,QAAN,CAAe,aAAf,GAA+B,aAA/B;;AAEA,KAAI,kBAAkB,mDAA8B,aAA9B,CAAtB;;AAEA,OAAM,GAAN;AACA,OAAM,GAAN,CAAU,eAAV;AACA,gBAAe,QAAf,EAAyB,KAAzB;AACA;;;AAGD,SAAS,cAAT,CAAwB,QAAxB,EAAkC,KAAlC,EAAyC;AACxC,OAAM,GAAN,CAAU,2HAAV,EAAuI,UAAC,QAAD,EAAW,KAAX,EAAqB;AAC3J,oBAAkB,QAAlB,EAA4B,KAA5B;AACA,QAAM,IAAN;AACA,EAHD;AAIA;;;AAGD,SAAS,iBAAT,CAA2B,QAA3B,EAAqC,KAArC,EAA4C;AAAA,KAEnC,IAFmC,GAEX,KAFW,CAEnC,IAFmC;AAAA,KAGnC,GAHmC,GAGX,IAHW,CAGnC,GAHmC;AAAA,KAG9B,cAH8B,GAGX,IAHW,CAG9B,cAH8B;AAAA,KAIrC,aAJqC,GAIlB,MAAM,QAJY,CAIrC,aAJqC;;;AAM3C,KAAI,aAAa,SAAS,IAA1B;;;;AAIA,KAAI,YAAY,KAAhB;AACA,cAAa,WAAW,KAAX,CAAiB,GAAjB,CAAb;AACA,KAAI,WAAW,MAAX,IAAqB,cAAc,MAAvC,EAA+C;AAC9C,cAAY,IAAZ;AACA;;AAED,KAAI,qBAAqB,IAAI,MAAJ,CAAW,OAAX,CAAzB;AACA,cAAa,WAAW,GAAX,CAAe,UAAC,IAAD,EAAU;AACrC,MAAI,CAAC,mBAAmB,IAAnB,CAAwB,IAAxB,CAAL,EAAoC;AACnC,eAAY,IAAZ;AACA;AACD,MAAI,UAAU,gDAA2B,IAA3B,CAAd;AACA,SAAO,OAAP;AACA,EANY,CAAb;;AAQA,iBAAgB,cAAc,GAAd,CAAkB,UAAC,IAAD,EAAO,KAAP,EAAiB;AAClD,sBACI,IADJ;AAEC,YAAS,WAAW,KAAX;AAFV;AAIA,EALe,CAAhB;;AAOA,OAAM,QAAN,CAAe,aAAf,GAA+B,aAA/B;AACA,KAAI,kBAA2B,mDAA8B,aAA9B,CAA/B;;;AAGA,KAAI,SAAJ,EAAe;AACd,QAAM,GAAN,CAAU,sFAAV;AACA,QAAM,GAAN,CAAU,4NAAV;AACA,QAAM,GAAN,CAAU,0GAAV;AACA,QAAM,GAAN,CAAU,eAAV;AACA,iBAAe,QAAf,EAAyB,KAAzB;AACA;AACA;;AAED,OAAM,GAAN,CAAU,wBAAV;AACA,OAAM,GAAN,CAAU,eAAV,EAA2B,CAC1B;AACC,WAAS,IAAI,UAAJ,CAAe,GADzB;AAEC,YAAU,kBAAC,QAAD,EAAW,KAAX,EAAqB;AAC9B,SAAM,GAAN;AACA,uBAAoB,QAApB,EAA8B,KAA9B;AACA,SAAM,IAAN;AACA;AANF,EAD0B,EAS1B;AACC,WAAS,IAAI,UAAJ,CAAe,EADzB;AAEC,YAAU,kBAAC,QAAD,EAAW,KAAX,EAAqB;AAC9B,SAAM,GAAN;AACA,SAAM,GAAN,CAAU,eAAV;AACA,SAAM,GAAN;AACA,SAAM,GAAN,CAAU,0GAAV,EAAsH,UAAC,QAAD,EAAW,KAAX,EAAqB;AAC1I,sBAAkB,QAAlB,EAA4B,KAA5B;AACA,UAAM,IAAN;AACA,IAHD;AAIA,SAAM,IAAN;AACA;AAXF,EAT0B,CAA3B;AAwBA;;;AAGD,SAAS,mBAAT,CAA6B,QAA7B,EAAuC,KAAvC,EAA8C;AAAA,KAErC,IAFqC,GAEb,KAFa,CAErC,IAFqC;AAAA,KAGrC,GAHqC,GAGb,IAHa,CAGrC,GAHqC;AAAA,KAGhC,cAHgC,GAGb,IAHa,CAGhC,cAHgC;;;;AAAA,uBAMT,MAAM,QANG;AAAA,KAMvC,UANuC,mBAMvC,UANuC;AAAA,KAM3B,aAN2B,mBAM3B,aAN2B;;AAO7C,KAAI,gBAAgB,WAAW,KAAX,EAApB;AACA,eAAc,OAAd,CAAsB,UAAC,OAAD,EAAa;AAClC,gBAAc,IAAd,CAAmB,OAAnB;AACA,EAFD;AAGA,OAAM,QAAN,CAAe,aAAf,GAA+B,aAA/B;;AAEA,KAAI,kBAAkB,mDAA8B,aAA9B,CAAtB;AACA,OAAM,GAAN,CAAU,0DAAV;AACA,OAAM,GAAN,CAAU,eAAV;AACA,OAAM,GAAN,CAAU,qDAAV,EAAiE,UAAC,QAAD,EAAW,KAAX,EAAqB;AACrF,qBAAmB,QAAnB,EAA6B,KAA7B;AACA,QAAM,IAAN;AACA,EAHD;AAKA;;;;AAID,SAAS,kBAAT,CAA4B,QAA5B,EAAsC,KAAtC,EAA6C;AAAA,KAEpC,IAFoC,GAEZ,KAFY,CAEpC,IAFoC;AAAA,KAGpC,GAHoC,GAGZ,IAHY,CAGpC,GAHoC;AAAA,KAG/B,cAH+B,GAGZ,IAHY,CAG/B,cAH+B;;;;AAAA,wBAMO,MAAM,QANb;AAAA,KAMtC,UANsC,oBAMtC,UANsC;AAAA,KAM1B,aAN0B,oBAM1B,aAN0B;AAAA,KAMX,aANW,oBAMX,aANW;;AAO5C,KAAI,gBAAgB,WAAW,KAAX,EAApB;AACA,eAAc,OAAd,CAAsB,UAAC,OAAD,EAAa;AAClC,gBAAc,IAAd,CAAmB,OAAnB;AACA,EAFD;;AAIA,KAAI,uBAAuB,SAAS,IAApC;;;AAGA,KAAI,YAAY,KAAhB;AACA,KAAI,gBAAgB,IAAI,MAAJ,CAAW,IAAX,CAApB;AACA,wBAAuB,qBAAqB,KAArB,CAA2B,GAA3B,EAAgC,GAAhC,CAAoC,UAAC,KAAD,EAAW;AACrE,UAAQ,MAAM,IAAN,EAAR;AACA,MAAI,cAAc,SAAS,KAAT,CAAlB;AACA,MAAI,cAAc,IAAd,CAAmB,KAAnB,KAA6B,cAAc,cAAc,MAA7D,EACC,YAAY,IAAZ;AACD,SAAO,WAAP;AACA,EANsB,CAAvB;;AAQA,KAAI,SAAJ,EAAe;AACd,QAAM,GAAN,CAAU,wFAAV;AACA,sBAAoB,QAApB,EAA8B,KAA9B;AACA;AACA;;AAED,KAAI,gBAAgB,EAApB;AACA,sBAAqB,OAArB,CAA6B,UAAS,KAAT,EAAgB;AAC5C,MAAK,QAAQ,CAAb,EAAgB;AACf,W;AACA,iBAAc,IAAd,CAAmB,KAAnB;AACA;AACD,EALD;;AAOA,KAAI,uBAAuB,EAA3B;AACA,eAAc,OAAd,CAAsB,UAAC,KAAD,EAAW;AAChC,uBAAqB,IAArB,CAA0B,cAAc,KAAd,CAA1B;AACA,EAFD;;AAIA,KAAI,kBAAkB,mDAA8B,oBAA9B,CAAtB;;AAEA,OAAM,GAAN,CAAU,6BAAV;AACA,OAAM,GAAN,CAAU,eAAV,EAA2B,CAC1B;AACC,WAAS,IAAI,UAAJ,CAAe,GADzB;AAEC,YAAU,kBAAC,QAAD,EAAW,KAAX,EAAqB;;AAE9B,SAAM,QAAN,CAAe,oBAAf,GAAsC,oBAAtC;;AAEA,SAAM,GAAN,CAAU,wBAAV;AACA,SAAM,GAAN,CAAU,sBAAV;AACA,SAAM,IAAN;AACA;AATF,EAD0B,EAY1B;AACC,WAAS,IAAI,UAAJ,CAAe,EADzB;AAEC,YAAU,kBAAC,QAAD,EAAW,KAAX,EAAqB;AAC9B,SAAM,GAAN,CAAU,4CAAV;AACA,uBAAoB,QAApB,EAA8B,KAA9B;AACA,SAAM,IAAN;AACA;AANF,EAZ0B,CAA3B;AAuBA","file":"add.js","sourcesContent":["import os from 'os';\nimport { wit } from '../index';\nimport http from 'http';\nimport bodyParser from 'body-parser';\nimport moment from 'moment-timezone';\n\nimport models from '../../../app/models';\n\nimport { convertToSingleTaskObjectArray, convertArrayToTaskListMessage, convertResponseObjectsToTaskArray, convertTimeStringToMinutes } from '../../lib/messageHelpers';\nimport intentConfig from '../../lib/intents';\n\nconst FINISH_WORD = 'done';\n\n// base controller for tasks\nexport default function(controller) {\n\n\t/**\n\t * \t\tUser wants to add task\n\t * \t\t\tas interpreted by ~ Wit.ai ~\n\t */\n\tcontroller.hears(['add_daily_task'], 'direct_message', wit.hears, (bot, message) => {\n\n\t\tconst SlackUserId = message.user;\n\t\tvar intent        = intentConfig.ADD_TASK;\n\t\tvar channel       = message.channel;\n\n\t\tvar config = {\n\t\t\tintent,\n\t\t\tSlackUserId\n\t\t}\n\n\t\tbot.send({\n\t\t\ttype: \"typing\",\n\t\t\tchannel: message.channel\n\t\t});\n\t\tsetTimeout(() => {\n\t\t\tcontroller.trigger(`new_session_group_decision`, [ bot, config ]);\n\t\t}, 1000);\n\n\t});\n\n\t/**\n\t * \t\t\tADD DAILY TASK FLOW\n\t */\n\tcontroller.on(`add_task_flow`, (bot, config) => {\n\n\t\tconst { SlackUserId } = config;\n\n\t\t// find user then get tasks\n\t\tmodels.User.find({\n\t\t\twhere: [`\"SlackUser\".\"SlackUserId\" = ?`, SlackUserId ],\n\t\t\tinclude: [\n\t\t\t\tmodels.SlackUser\n\t\t\t]\n\t\t})\n\t\t.then((user) => {\n\n\t\t\t// we need user's task lists since start_day\n\t\t\tconst UserId = user.id;\n\n\t\t\tuser.getSessionGroups({\n\t\t\t\torder: `\"SessionGroup\".\"createdAt\" DESC`,\n\t\t\t\tlimit: 1\n\t\t\t})\n\t\t\t.then((sessionGroups) => {\n\n\t\t\t\t// should start day\n\n\t      const startSessionGroup   = sessionGroups[0]; // the start day\n\t\t\t\tvar startSessionGroupTime = startSessionGroup.dataValues.createdAt;\n\n\t\t\t\tuser.getDailyTasks({\n\t\t\t\t\twhere: [`\"DailyTask\".\"createdAt\" > ? AND \"Task\".\"done\" = ? AND \"DailyTask\".\"type\" = ?`, startSessionGroupTime, false, \"live\"],\n\t\t\t\t\tinclude: [ models.Task ],\n\t\t\t\t\torder: `\"DailyTask\".\"priority\" ASC`\n\t\t\t\t})\n\t\t\t\t.then((dailyTasks) => {\n\n\t\t\t\t\tvar name   = user.nickName || user.email;\n\t\t\t\t\tvar SlackUserId = user.SlackUser.SlackUserId;\n\n\t\t\t\t\tbot.startPrivateConversation ({ user: SlackUserId }, (err, convo) => {\n\n\t\t\t\t\t\tconvo.name = name;\n\t\t\t\t\t\tconvo.tasksAdd = {\n\t\t\t\t\t\t\tSlackUserId\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tdailyTasks = convertToSingleTaskObjectArray(dailyTasks, \"daily\");\n\t\t\t\t\t\tconvo.tasksAdd.dailyTasks   = dailyTasks;\n\n\t\t\t\t\t\taskForNewTasksToAdd(err, convo);\n\n\t\t\t\t\t\t// on finish conversation\n\t\t    \t\tconvo.on('end', (convo) => {\n\n\t\t    \t\t\tconsole.log(\"\\n\\n\\n\\n ~~ convo ended in add tasks ~~ \\n\\n\\n\\n\");\n\n\t\t  \t\t\t\tvar responses = convo.extractResponses();\n\t\t  \t\t\t\tconst { tasksAdd } = convo;\n\n\t\t    \t\t\tif (convo.status == 'completed') {\n\n\t\t    \t\t\t\t// prioritized task array is the one we're ultimately going with\n\t\t    \t\t\t\tconst { dailyTasks, prioritizedTaskArray } = tasksAdd;\n\n\t\t    \t\t\t\t// we're going to archive all existing daily tasks first by default, then re-update the ones that matter\n\t\t    \t\t\t\tdailyTasks.forEach((dailyTask) => {\n\t\t    \t\t\t\t\tconst { id } = dailyTask.dataValues;\n\t\t    \t\t\t\t\tconsole.log(`\\n\\n\\nupdating daily task id: ${id}\\n\\n\\n`);\n\t\t    \t\t\t\t\tmodels.DailyTask.update({\n\t\t    \t\t\t\t\t\ttype: \"archived\"\n\t\t    \t\t\t\t\t},{\n\t\t    \t\t\t\t\t\twhere: { id }\n\t\t    \t\t\t\t\t});\n\t\t    \t\t\t\t});\n\n\t\t    \t\t\t\t// store the user's tasks\n\t\t    \t\t\t\t// existing dailyTasks: update to new obj (esp. `priority`)\n\t\t    \t\t\t\t// new dailyTasks: create new obj\n\t\t    \t\t\t\tprioritizedTaskArray.forEach((dailyTask, index) => {\n\n\t\t    \t\t\t\t\tconst { dataValues } = dailyTask;\n\t\t    \t\t\t\t\tvar newPriority = index + 1;\n\t\t    \t\t\t\t\t\n\t\t    \t\t\t\t\tif (dataValues) {\n\n\t\t\t    \t\t\t\t\tconsole.log(\"\\n\\nexisting daily task:\\n\\n\\n\");\n\t\t\t    \t\t\t\t\tconsole.log(dailyTask.dataValues);\n\t\t\t    \t\t\t\t\tconsole.log(`user id: ${UserId}`);\n\t\t\t    \t\t\t\t\tconsole.log(\"\\n\\n\\n\\n\")\n\n\t\t    \t\t\t\t\t\t// existing daily task and make it live\n\t\t    \t\t\t\t\t\tconst { id, minutes } = dataValues;\n\t\t    \t\t\t\t\t\tmodels.DailyTask.update({\n\t\t    \t\t\t\t\t\t\tminutes,\n\t\t    \t\t\t\t\t\t\tUserId,\n\t\t    \t\t\t\t\t\t\tpriority: newPriority,\n\t\t    \t\t\t\t\t\t\ttype: \"live\"\n\t\t    \t\t\t\t\t\t}, {\n\t\t    \t\t\t\t\t\t\twhere: { id }\n\t\t    \t\t\t\t\t\t});\n\n\t\t    \t\t\t\t\t} else {\n\n\t\t    \t\t\t\t\t\tconsole.log(\"\\n\\n new daily task:\\n\\n\\n\");\n\t\t\t    \t\t\t\t\tconsole.log(dailyTask);\n\t\t\t    \t\t\t\t\tconsole.log(`user id: ${UserId}`);\n\t\t\t    \t\t\t\t\tconsole.log(\"\\n\\n\\n\\n\")\n\n\t\t    \t\t\t\t\t\t// new task\n\t\t    \t\t\t\t\t\tconst { text, minutes } = dailyTask;\n\t\t    \t\t\t\t\t\tmodels.Task.create({\n\t\t    \t\t\t\t\t\t\ttext\n\t\t    \t\t\t\t\t\t})\n\t\t    \t\t\t\t\t\t.then((task) => {\n\t\t    \t\t\t\t\t\t\tmodels.DailyTask.create({\n\t\t    \t\t\t\t\t\t\t\tTaskId: task.id,\n\t\t    \t\t\t\t\t\t\t\tpriority: newPriority,\n\t\t    \t\t\t\t\t\t\t\tminutes,\n\t\t    \t\t\t\t\t\t\t\tUserId\n\t\t    \t\t\t\t\t\t\t})\n\t\t    \t\t\t\t\t\t});\n\t\t    \t\t\t\t\t}\n\n\t\t    \t\t\t\t})\n\n\t\t    \t\t\t} else {\n\n\t\t    \t\t\t\tbot.startPrivateConversation({ user: SlackUserId }, (err, convo) => {\n\t\t\t\t\t\t\t\t\tconvo.say(\"Okay! I'll be here whenever you're ready :smile:\");\n\t\t\t\t\t\t\t\t\tconvo.next();\n\t\t\t\t\t\t\t\t});\n\t\t\t    \t\t\t\t\n\t\t    \t\t\t}\n\t\t    \t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n\n};\n\n// user adds new tasks here\nfunction askForNewTasksToAdd(response, convo) {\n\n\tconst { task, name }          = convo;\n\tconst { bot, source_message } = task;\n\tvar { dailyTasks }            = convo.tasksAdd;\n\n\tvar taskListMessage = convertArrayToTaskListMessage(dailyTasks);\n\n\tif (dailyTasks.length > 0) {\n\t\tconvo.say(`Here are the tasks you outlined so far:`);\n\t\tconvo.say(taskListMessage);\n\t}\n\t\n\tconvo.say(`What task(s) would you like to add to your list? :pencil:`);\n\tconvo.say(`You can enter everything in one line, separated by commas, or send me each task in a separate line`);\n\n\tconvo.ask(`Then just tell me when you're done by saying \\`${FINISH_WORD}\\`!`, (response, convo) => {\n\n\t\tif (response.text == FINISH_WORD) {\n\t\t\taskForTimeToTasks(response, convo);\n\t\t\tconvo.next();\n\t\t}\n\n\t}, { 'key' : 'newTasks', 'multiple': true});\n\n}\n\n// ask user to put time to tasks\nfunction askForTimeToTasks(response, convo) {\n\n\tconst { task }                = convo;\n\tconst { bot, source_message } = task;\n\tvar { newTasks }              = convo.responses;\n\n\tvar newTasksArray            = convertResponseObjectsToTaskArray(newTasks);\n\tconvo.tasksAdd.newTasksArray = newTasksArray;\n\n\tvar taskListMessage = convertArrayToTaskListMessage(newTasksArray);\n\n\tconvo.say(`Excellent! Now, how much time would you like to allocate to these new tasks today?`);\n\tconvo.say(taskListMessage);\n\tgetTimeToTasks(response, convo);\n}\n\n// actual question for user to give time to tasks\nfunction getTimeToTasks(response, convo) {\n\tconvo.ask(\"Just say, `30, 40, 50, 1 hour, 15 min` and I'll figure it out and assign those times to the tasks above in order :smiley:\", (response, convo) => {\n\t\tassignTimeToTasks(response, convo);\n\t\tconvo.next();\n\t});\n}\n\n// actual work of assigning user response times to task\nfunction assignTimeToTasks(response, convo) {\n\n\tconst { task }                = convo;\n\tconst { bot, source_message } = task;\n\tvar { newTasksArray }  = convo.tasksAdd;\n\n\tvar timeToTask = response.text;\n\n\t// need to check for invalid responses.\n\t// does not say minutes or hours, or is not right length\n\tvar isInvalid = false;\n\ttimeToTask = timeToTask.split(\",\");\n\tif (timeToTask.length != newTasksArray.length) {\n\t\tisInvalid = true;\n\t};\n\n\tvar validMinutesTester = new RegExp(/[\\dh]/);\n\ttimeToTask = timeToTask.map((time) => {\n\t\tif (!validMinutesTester.test(time)) {\n\t\t\tisInvalid = true;\n\t\t}\n\t\tvar minutes = convertTimeStringToMinutes(time);\n\t\treturn minutes;\n\t});\n\n\tnewTasksArray = newTasksArray.map((task, index) => {\n\t\treturn {\n\t\t\t...task,\n\t\t\tminutes: timeToTask[index]\n\t\t}\n\t});\n\n\tconvo.tasksAdd.newTasksArray = newTasksArray;\n\tvar taskListMessage          = convertArrayToTaskListMessage(newTasksArray);\n\n\t// INVALID tester\n\tif (isInvalid) {\n\t\tconvo.say(\"Oops, looks like you didn't put in valid times :thinking_face:. Let's try this again\");\n\t\tconvo.say(\"Send me the amount of time you'd like to work on each task above, separated by commas. The first time you list will represent the first task above, the second time you list will represent the second task, and on and on\");\n\t\tconvo.say(\"I'll assume you mean minutes - like `30` would be 30 minutes - unless you specify hours - like `2 hours`\");\n\t\tconvo.say(taskListMessage);\n\t\tgetTimeToTasks(response, convo);\n\t\treturn;\n\t}\n\n\tconvo.say(\"Are these times right?\");\n\tconvo.ask(taskListMessage, [\n\t\t{\n\t\t\tpattern: bot.utterances.yes,\n\t\t\tcallback: (response, convo) => {\n\t\t\t\tconvo.say(`This looks great. Let's add these to your existing list now`);\n\t\t\t\taskToPrioritizeList(response, convo);\n\t\t\t\tconvo.next();\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tpattern: bot.utterances.no,\n\t\t\tcallback: (response, convo) => {\n\t\t\t\tconvo.say(`Let's give this another try :repeat_one:`);\n\t\t\t\tconvo.say(taskListMessage);\n\t\t\t\tconvo.say(`Send me the amount of time you'd like to work on each task above, separated by commas. The first time you list will represent the first task above, the second time you list will represent the second task, and on and on`);\n\t\t\t\tconvo.ask(\"I'll assume you mean minutes - like `30` would be 30 minutes - unless you specify hours - like `2 hours`\", (response, convo) => {\n\t\t\t\t\tassignTimeToTasks(response, convo);\n\t\t\t\t\tconvo.next();\n\t\t\t\t});\n\t\t\t\tconvo.next();\n\t\t\t}\n\t\t}\n\t]);\n\n}\n\n// ask to prioritize task list. all existing daily tasks and new ones\nfunction askToPrioritizeList(response, convo) {\n\n\tconst { task }                = convo;\n\tconst { bot, source_message } = task;\n\n\t// organize the task lists!\n\tvar { dailyTasks, newTasksArray } = convo.tasksAdd;\n\tvar allTasksArray = dailyTasks.slice();\n\tnewTasksArray.forEach((newTask) => {\n\t\tallTasksArray.push(newTask);\n\t});\n\tconvo.tasksAdd.allTasksArray = allTasksArray;\n\n\tvar taskListMessage = convertArrayToTaskListMessage(allTasksArray);\n\tconvo.say(\"Please rank your tasks in order of your priorities today\");\n\tconvo.say(taskListMessage);\n\tconvo.ask(\"You can just like the numbers, like `3, 4, 1, 2, 5`\", (response, convo) => {\n\t\tprioritizeTaskList(response, convo);\n\t\tconvo.next();\n\t});\n\n}\n\n// assign the priorities to full task list\n// user has just listed `1, 3, 4, 2`\nfunction prioritizeTaskList(response, convo) {\n\n\tconst { task }                = convo;\n\tconst { bot, source_message } = task;\n\n\t// organize the task lists!\n\tvar { dailyTasks, newTasksArray, allTasksArray } = convo.tasksAdd;\n\tvar allTasksArray = dailyTasks.slice();\n\tnewTasksArray.forEach((newTask) => {\n\t\tallTasksArray.push(newTask);\n\t});\n\n\tvar initialPriorityOrder = response.text;\n\n\t// either a non-number, or number > length of tasks\n\tvar isInvalid = false;\n\tvar nonNumberTest = new RegExp(/\\D/);\n\tinitialPriorityOrder = initialPriorityOrder.split(\",\").map((order) => {\n\t\torder = order.trim();\n\t\tvar orderNumber = parseInt(order);\n\t\tif (nonNumberTest.test(order) || orderNumber > allTasksArray.length)\n\t\t\tisInvalid = true;\n\t\treturn orderNumber;\n\t});\n\n\tif (isInvalid) {\n\t\tconvo.say(\"Oops, looks like you didn't put in valid numbers :thinking_face:. Let's try this again\");\n\t\taskToPrioritizeList(response, convo);\n\t\treturn;\n\t}\n\n\tvar priorityOrder = [];\n\tinitialPriorityOrder.forEach(function(order) {\n\t\tif ( order > 0) {\n\t\t\torder--; // make user-entered numbers 0-index based\n\t\t\tpriorityOrder.push(order);\n\t\t}\n\t});\n\n\tvar prioritizedTaskArray = [];\n\tpriorityOrder.forEach((order) => {\n\t\tprioritizedTaskArray.push(allTasksArray[order]);\n\t});\n\n\tvar taskListMessage = convertArrayToTaskListMessage(prioritizedTaskArray);\n\n\tconvo.say(\"Is this the right priority?\");\n\tconvo.ask(taskListMessage, [\n\t\t{\n\t\t\tpattern: bot.utterances.yes,\n\t\t\tcallback: (response, convo) => {\n\n\t\t\t\tconvo.tasksAdd.prioritizedTaskArray = prioritizedTaskArray;\n\n\t\t\t\tconvo.say(\"Boom! This looks great\");\n\t\t\t\tconvo.say(\"Let's get back to it\");\n\t\t\t\tconvo.next();\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tpattern: bot.utterances.no,\n\t\t\tcallback: (response, convo) => {\n\t\t\t\tconvo.say(\"Whoops :banana: Let's try to do this again\");\n\t\t\t\taskToPrioritizeList(response, convo);\n\t\t\t\tconvo.next();\n\t\t\t}\n\t\t}\n\t]);\n\n\n}\n\n\n\n"]}