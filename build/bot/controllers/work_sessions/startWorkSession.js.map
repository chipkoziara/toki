{"version":3,"sources":["../../../../src/bot/controllers/work_sessions/startWorkSession.js"],"names":[],"mappings":"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","file":"startWorkSession.js","sourcesContent":["import os from 'os';\nimport { wit } from '../index';\nimport moment from 'moment-timezone';\n\nimport models from '../../../app/models';\nimport { randomInt } from '../../lib/botResponses';\nimport { convertToSingleTaskObjectArray, convertArrayToTaskListMessage } from '../../lib/messageHelpers';\nimport { createMomentObjectWithSpecificTimeZone } from '../../lib/miscHelpers';\nimport intentConfig from '../../lib/intents';\n\n// START OF A WORK SESSION\nexport default function(controller) {\n\n\t/**\n\t *\n\t * \t\tUser directly asks to start a session\n\t * \t\t\t\t\t\t\t~* via Wit *~\n\t * \t\t     this makes sure you are properly in\n\t * \t\t     \t\t\t\tin a \"SessionGroup\" before\n\t * \t\t     \t\t\tworking on your session\n\t */\n\tcontroller.hears(['start_session'], 'direct_message', wit.hears, (bot, message) => {\n\n\t\tconst SlackUserId = message.user;\n\t\tvar intent = intentConfig.START_SESSION;\n\n\t\tvar config = {\n\t\t\tintent,\n\t\t\tSlackUserId\n\t\t}\n\n\t\tbot.send({\n\t\t\ttype: \"typing\",\n\t\t\tchannel: message.channel\n\t\t});\n\t\tsetTimeout(() => {\n\t\t\tcontroller.trigger(`new_session_group_decision`, [ bot, config ]);\n\t\t}, 1000);\n\n\t});\n\n\t/**\n\t * \t\t\t\tEVERY CREATED SESSION GOES THROUGH THIS FIRST\n\t *   \t\t*** this checks if there is an existing open session ***\n\t *   \t\t\tif no open sessions => `begin_session`\n\t *   \t\t\telse => go through this flow\n\t */\n\tcontroller.on(`confirm_new_session`, (bot, config) => {\n\n\t\t/**\n\t\t * \t\tUser can either:\n\t\t * \t\t\t1. Keep going\n\t\t * \t\t\t2. Start new session by ending this one early\n\t\t * \t\t\t\t\t- update endTime in session to now\n\t\t * \t\t\t\t\t- mark it as done and re-enter `begin_session`\n\t\t */\n\n\t\tconst { SlackUserId } = config;\n\t\tconsole.log(\"\\n\\n\\n\\n\\nin `confirm_new_session` before entering begin_session flow!\\n\\n\\n\\n\\n\");\n\n\t\tmodels.User.find({\n\t\t\twhere: [`\"SlackUser\".\"SlackUserId\" = ?`, SlackUserId ],\n\t\t\tinclude: [\n\t\t\t\tmodels.SlackUser\n\t\t\t]\n\t\t})\n\t\t.then((user) => {\n\n\t\t\tuser.getWorkSessions({\n\t\t\t\twhere: [`\"open\" = ?`, true ]\n\t\t\t})\n\t\t\t.then((workSessions) => {\n\n\t\t\t\t// no open work sessions => you're good to go!\n\t\t\t\tif (workSessions.length == 0) {\n\t\t\t\t\tcontroller.trigger(`begin_session`, [ bot, { SlackUserId }]);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// otherwise, we gotta confirm user wants to cancel current work session\n\n\t\t\t\tbot.startPrivateConversation({ user: SlackUserId }, (err, convo) => {\n\n\t\t\t\t\t// by default, user wants to start a new session\n\t\t\t\t\t// that's why she is in this flow...\n\t\t\t\t\t// no openWorkSession unless we found one\n\t\t\t\t\tconvo.startNewSession = true;\n\t\t\t\t\tconvo.openWorkSession = false;\n\n\t\t\t\t\tvar openWorkSession = workSessions[0]; // deal with first one as reference point\n\t\t\t\t\tconvo.openWorkSession = openWorkSession;\n\n\t\t\t\t\tvar endTime       = moment(openWorkSession.endTime);\n\t\t\t\t\tvar endTimeString = endTime.format(\"h:mm a\");\n\t\t\t\t\tvar now           = moment();\n\t\t\t\t\tvar minutesLeft   = Math.round(moment.duration(endTime.diff(now)).asMinutes());\n\n\t\t\t\t\tconvo.say(`You are already in a session right now! You have ${minutesLeft} minutes left :timer_clock:`);\n\t\t\t\t\tconvo.ask(`Do you want to \\`keep going\\`, or cancel it and start a \\`new session\\`?`, (response, convo) => {\n\n\t\t\t\t\t\tvar responseMessage = response.text;\n\t\t\t\t\t\tvar { intentObject: { entities } } = response;\n\n\t\t\t\t\t\tvar newSession = new RegExp(/(((^st[tart]*))|(^ne[ew]*)|(^se[ession]*))/); // `start` or `new`\n\t\t\t\t\t\tvar keepGoing = new RegExp(/(((^k[ep]*))|(^go[oing]*))/); // `keep` or `going`\n\n\t\t\t\t\t\tif (newSession.test(responseMessage)) {\n\n\t\t\t\t\t\t\t// start new session\n\t\t\t\t\t\t\tconvo.say(\"Got it. Let's do a new session :facepunch:\");\n\n\t\t\t\t\t\t} else if (keepGoing.test(responseMessage)) {\n\n\t\t\t\t\t\t\t// continue current session\n\t\t\t\t\t\t\tconvo.say(\"Got it. Let's do it! :weight_lifter:\");\n\t\t\t\t\t\t\tconvo.say(`I'll ping you at ${endTimeString} :alarm_clock:`);\n\t\t\t\t\t\t\tconvo.startNewSession = false;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// invalid\n\t\t\t\t\t\t\tconvo.say(\"I'm sorry, I didn't catch that :dog:\");\n\t\t\t\t\t\t\tconvo.repeat();\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconvo.next();\n\n\t\t\t\t\t});\n\n\t\t\t\t\tconvo.on('end', (convo) => {\n\n\t\t\t\t\t\tconsole.log(\"\\n\\n\\n ~~ here in end of confirm_new_session ~~ \\n\\n\\n\");\n\n\t\t\t\t\t\tconst { startNewSession, openWorkSession } = convo;\n\n\t\t\t\t\t\t// if user wants to start new session, then do this flow and enter `begin_session` flow\n\t\t\t\t\t\tif (startNewSession) {\n\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * \t\t~ User has confirmed starting a new session ~\n\t\t\t\t\t\t\t * \t\t\t* end current work session early\n\t\t\t\t\t\t\t * \t\t\t* cancel all existing open work sessions\n\t\t\t\t\t\t\t * \t\t\t* cancel `break` reminders\n\t\t\t\t\t\t\t */\n\n\t\t\t\t\t\t\tvar nowTimeStamp = moment().format(\"YYYY-MM-DD HH:mm:ss\");\n\n\t\t\t\t\t\t\t// if user had an open work session(s), cancel them!\n\t\t\t\t\t\t\tif (openWorkSession) {\n\t\t\t\t\t\t\t\topenWorkSession.update({\n\t\t\t\t\t\t\t\t\tendTime: nowTimeStamp,\n\t\t\t\t\t\t\t\t\topen: false\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tworkSessions.forEach((workSession) => {\n\t\t\t\t\t\t\t\t\tworkSession.update({\n\t\t\t\t\t\t\t\t\t\topen: false\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// cancel all user breaks cause user is RDY TO WORK\n\t\t\t\t\t\t\tmodels.User.find({\n\t\t\t\t\t\t\t\twhere: [`\"SlackUser\".\"SlackUserId\" = ?`, SlackUserId ],\n\t\t\t\t\t\t\t\tinclude: [\n\t\t\t\t\t\t\t\t\tmodels.SlackUser\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.then((user) => {\n\t\t\t\t\t\t\t\tuser.getReminders({\n\t\t\t\t\t\t\t\t\twhere: [ `\"open\" = ? AND \"type\" IN (?)`, true, [\"work_session\", \"break\"] ]\n\t\t\t\t\t\t\t\t}).\n\t\t\t\t\t\t\t\tthen((reminders) => {\n\t\t\t\t\t\t\t\t\treminders.forEach((reminder) => {\n\t\t\t\t\t\t\t\t\t\treminder.update({\n\t\t\t\t\t\t\t\t\t\t\t\"open\": false\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tcontroller.trigger(`begin_session`, [ bot, { SlackUserId }]);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t})\n\t});\n\n\t/**\n\t * \t\tACTUAL START SESSION FLOW\n\t * \t\tthis will begin the start_session flow with user\n\t *\n\t * \t\t\t- start work session\n\t * \t\t\t- show and decide tasks to work on\n\t * \t\t\t- decide session duration\n\t */\n\tcontroller.on('begin_session', (bot, config) => {\n\n\t\tconst { SlackUserId } = config;\n\n\t\tmodels.User.find({\n\t\t\twhere: [`\"SlackUser\".\"SlackUserId\" = ?`, SlackUserId ],\n\t\t\tinclude: [\n\t\t\t\tmodels.SlackUser\n\t\t\t]\n\t\t}).then((user) => {\n\n\t\t\tbot.startPrivateConversation({ user: SlackUserId }, (err, convo) => {\n\n\t\t\t\tvar name = user.nickName || user.email;\n\n\t\t\t\t// configure necessary properties on convo object\n\t\t\t\tconvo.name = name;\n\n\t\t\t\t// object that contains values important to this conversation\n\t\t\t\tconvo.sessionStart = {\n\t\t\t\t\tUserId: user.id,\n\t\t\t\t\tSlackUserId\n\t\t\t\t};\n\n\t\t\t\t// temporary fix to get tasks\n\t\t\t\tvar timeAgoForTasks = moment().subtract(14, 'hours').format(\"YYYY-MM-DD HH:mm:ss\");\n\n\t\t\t\t// FIND DAILY TASKS, THEN START THE CONVERSATION\n\t\t\t\tuser.getDailyTasks({\n\t\t\t\t\twhere: [`\"DailyTask\".\"createdAt\" > ? AND \"Task\".\"done\" = ? AND \"DailyTask\".\"type\" = ?`, timeAgoForTasks, false, \"live\"],\n\t\t\t\t\torder: `\"priority\" ASC`,\n\t\t\t\t\tinclude: [ models.Task ]\n\t\t\t\t}).then((dailyTasks) => {\n\n\t\t\t\t\t\t// save the daily tasks for reference\n\t\t\t\t\t\tdailyTasks = convertToSingleTaskObjectArray(dailyTasks, \"daily\");\n\t\t\t\t\t\tconvo.sessionStart.dailyTasks = dailyTasks;\n\n\t\t\t\t\t\t// user needs to enter daily tasks\n\t\t\t\t\t\tif (dailyTasks.length == 0) {\n\t\t\t\t\t\t\tconvo.sessionStart.noDailyTasks = true;\n\t\t\t\t\t\t\tconvo.stop();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// entry point of thy conversation\n\t\t\t\t\t\t\tstartSessionStartConversation(err, convo);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t});\n\n\t\t\t\t// on finish convo\n\t\t\t\tconvo.on('end', (convo) => {\n\n\t\t\t\t\tvar responses        = convo.extractResponses();\n\t\t\t\t\tvar { sessionStart } = convo;\n\t\t\t\t\tvar { SlackUserId } = sessionStart;\n\n\t\t\t\t\t// proxy that some odd bug has happened\n\t\t\t\t\t// impossible to have 1+ daily tasks and no time estimate\n\t\t\t\t\tif (sessionStart.dailyTasks.length > 0 && !sessionStart.calculatedTimeObject) {\n\n\t\t\t\t\t\tbot.startPrivateConversation({ user: SlackUserId }, (err, convo) => {\n\t\t\t\t\t\t\tconvo.say(\"Sorry but something went wrong :dog:. Let me know if you want to `start a session` again\");\n\t\t\t\t\t\t\tconvo.next();\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (convo.status == 'completed') {\n\n\t\t\t\t\t\tconsole.log(\"finished and this is the data:\");\n\t\t\t\t\t\tconsole.log(sessionStart);\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * \t\t1. tell user time and tasks to work on\n\t\t\t\t\t\t * \t\t\n\t\t\t\t\t\t *\t\t2. save responses to DB:\n\t\t\t\t\t\t *\t\t\tsession:\n\t\t\t\t\t\t *\t\t\t\t- tasks to work on (tasksToWorkOnHash)\n\t\t\t\t\t\t *\t\t\t\t- sessionEndTime (calculated)\n\t\t\t\t\t\t *\t\t\t\t- reminder (time + possible customNote)\n\t\t\t\t\t\t *\n\t\t\t\t\t\t * \t\t3. start session\n\t\t\t\t\t\t */\n\n\t\t\t\t\t\tvar { UserId, SlackUserId, dailyTasks, calculatedTime, calculatedTimeObject, tasksToWorkOnHash, checkinTimeObject, reminderNote } = sessionStart;\n\n\t\t\t\t\t\t// if user wanted a checkin reminder\n\t\t\t\t\t\tif (checkinTimeObject) {\n\t\t\t\t\t\t\tvar checkInTimeStamp = checkinTimeObject.format(\"YYYY-MM-DD HH:mm:ss\");\n\t\t\t\t\t\t\tmodels.Reminder.create({\n\t\t\t\t\t\t\t\tremindTime: checkInTimeStamp,\n\t\t\t\t\t\t\t\tUserId,\n\t\t\t\t\t\t\t\tcustomNote: reminderNote,\n\t\t\t\t\t\t\t\ttype: \"work_session\"\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// 1. create work session \n\t\t\t\t\t\t// 2. attach the daily tasks to work on during that work session\n\t\t\t\t\t\tvar startTime = moment().format(\"YYYY-MM-DD HH:mm:ss\");\n\t\t\t\t\t\tvar endTime   = calculatedTimeObject.format(\"YYYY-MM-DD HH:mm:ss\");\n\n\t\t\t\t\t\t// create necessary data models:\n\t\t\t\t\t\t// \tarray of Ids for insert, taskObjects to create taskListMessage\n\t\t\t\t\t\tvar dailyTaskIds       = [];\n\t\t\t\t\t\tvar tasksToWorkOnArray = [];\n\t\t\t\t\t\tfor (var key in tasksToWorkOnHash) {\n\t\t\t\t\t\t\tvar task = tasksToWorkOnHash[key];\n\t\t\t\t\t\t\tdailyTaskIds.push(task.dataValues.id);\n\t\t\t\t\t\t\ttasksToWorkOnArray.push(task);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmodels.WorkSession.create({\n\t\t\t\t\t\t\tstartTime,\n\t\t\t\t\t\t\tendTime,\n\t\t\t\t\t\t\tUserId\n\t\t\t\t\t\t}).then((workSession) => {\n\t\t\t\t\t\t\tworkSession.setDailyTasks(dailyTaskIds);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tvar taskListMessage = convertArrayToTaskListMessage(tasksToWorkOnArray);\n\n\t\t\t\t\t\tbot.startPrivateConversation({ user: SlackUserId }, (err, convo) => {\n\t\t\t\t\t\t\tconvo.say(`Excellent! See you at ${calculatedTime}! :timer_clock:`);\n\t\t\t\t\t\t\tconvo.say(`Good luck with: \\n${taskListMessage}`);\n\t\t\t\t\t\t\tconvo.next();\n\t\t\t\t\t\t});\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// ending convo prematurely\n\n\t\t\t\t\t\tif (sessionStart.noDailyTasks) {\n\n\t\t\t\t\t\t\tconst { task }                = convo;\n\t\t\t\t\t\t\tconst { bot, source_message } = task;\n\n\t\t\t\t\t\t\tvar fiveHoursAgo = new Date(moment().subtract(5, 'hours'));\n\t\t\t\t      user.getWorkSessions({\n\t\t\t\t        where: [`\"WorkSession\".\"endTime\" > ?`, fiveHoursAgo]\n\t\t\t\t      })\n\t\t\t\t      .then((workSessions) => {\n\n\t\t\t\t      \t// start a new day if you have not had a work session in 5 hours\n\t\t\t\t      \tconst startNewDay = (workSessions.length == 0 ? true : false);\n\t\t\t\t      \tbot.startPrivateConversation({ user: SlackUserId }, (err, convo) => {\n\n\t\t\t\t      \t\tconvo.startNewDay = startNewDay;\n\n\t\t\t\t      \t\tif (startNewDay) {\n\t\t\t\t      \t\t\tconvo.say(\"Hey! You haven't entered any tasks yet today. Let's start the day before doing a session :muscle:\");\n\t\t\t\t      \t\t} else {\n\t\t\t\t      \t\t\tconvo.say(\"Hey! You don't have any tasks right now. Let's get things to work on first\");\n\t\t\t\t      \t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tconvo.next();\n\t\t\t\t\t\t\t\t\tconvo.on('end', (convo) => {\n\t\t\t\t\t\t\t\t\t\t// go to start your day from here\n\t\t\t\t\t\t\t\t\t\tvar config          = { SlackUserId };\n\t\t\t\t\t\t\t\t\t\tvar { startNewDay } = convo;\n\n\t\t\t\t\t\t\t\t\t\tif (startNewDay) {\n\t\t\t\t\t\t\t\t\t\t\tcontroller.trigger('begin_day_flow', [bot, config]);\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tcontroller.trigger('add_task_flow', [ bot, config ]);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t      });\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// default premature end!\n\t\t\t\t\t\t\tbot.startPrivateConversation({ user: SlackUserId }, (err, convo) => {\n\t\t\t\t\t\t\t\tconvo.say(\"Okay! Exiting now. Let me know when you want to start on a session\");\n\t\t\t\t\t\t\t\tconvo.next();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t});\n\n\n\t\t});\n\n\t});\n\n}\n\n// user just started conversation and is choosing which tasks to work on\nfunction startSessionStartConversation(response, convo) {\n\n\tconst { task }                = convo;\n\tconst { bot, source_message } = task;\n\tconst { UserId, dailyTasks }  = convo.sessionStart;\n\n\tconvo.say(\"Let's do it :weight_lifter:\");\n\tconvo.say(`Which tasks would you like to work on?`);\n\n\tvar taskListMessage = convertArrayToTaskListMessage(dailyTasks);\n\n\tconvo.say(taskListMessage);\n\tconvo.say(\"You can either work on one task by saying `let's work on task 1` or multiple tasks by saying `let's work on tasks 1, 2, and 3`\");\n\n\taskWhichTasksToWorkOn(response, convo);\n\tconvo.next();\n\n\n}\n\n// confirm user for the tasks and \nfunction askWhichTasksToWorkOn(response, convo) {\n\tconvo.ask(\"I recommend working for at least 30 minutes at a time, so if you want to work on shorter tasks, try to pick several to get over that 30 minute threshold :smiley:\", (response, convo) => {\n\t\tconfirmTasks(response, convo);\n\t\tconvo.next();\n\t}, { 'key' : 'tasksToWorkOn' });\n}\n\nfunction confirmTasks(response, convo) {\n\n\tconst { task }                = convo;\n\tconst { bot, source_message } = task;\n\tconst { dailyTasks }          = convo.sessionStart;\n\tvar { tasksToWorkOn }         = convo.responses;\n\tvar tasksToWorkOnSplitArray   = tasksToWorkOn.text.split(/(,|and)/);\n\n\t// if we capture 0 valid tasks from string, then we start over\n\tvar numberRegEx = new RegExp(/[\\d]+/);\n\tvar taskNumbersToWorkOnArray = []; // user assigned task numbers\n\ttasksToWorkOnSplitArray.forEach((taskString) => {\n\t\tconsole.log(`task string: ${taskString}`);\n\t\tvar taskNumber = taskString.match(numberRegEx);\n\t\tif (taskNumber) {\n\t\t\ttaskNumber = parseInt(taskNumber[0]);\n\t\t\tif (taskNumber <= dailyTasks.length) {\n\t\t\t\ttaskNumbersToWorkOnArray.push(taskNumber);\n\t\t\t}\n\t\t}\n\t});\n\n\t// invalid if we captured no tasks\n\tvar isInvalid = (taskNumbersToWorkOnArray.length == 0 ? true : false);\n\tvar taskListMessage = convertArrayToTaskListMessage(dailyTasks);\n\n\t// repeat convo if invalid w/ informative context\n\tif (isInvalid) {\n\t\tconvo.say(\"Oops, I don't totally understand :dog:. Let's try this again\");\n\t\tconvo.say(\"You can either work on one task by saying `let's work on task 1` or multiple tasks by saying `let's work on tasks 1, 2, and 3`\");\n\t\tconvo.say(taskListMessage);\n\t\taskWhichTasksToWorkOn(response, convo);\n\t\treturn;\n\t}\n\n\t// if not invalid, we can set the tasksToWorkOnArray\n\tvar tasksToWorkOnHash = {}; // organize by task number assigned from user\n\ttaskNumbersToWorkOnArray.forEach((taskNumber) => {\n\t\tvar index = taskNumber - 1; // make this 0-index based\n\t\tif (dailyTasks[index])\n\t\t\ttasksToWorkOnHash[taskNumber] = dailyTasks[index];\n\t});\n\n\tconvo.ask(`To :heavy_check_mark:, you want to work on tasks: ${taskNumbersToWorkOnArray.join(\", \")}?`,[\n\t\t{\n\t\t\tpattern: bot.utterances.yes,\n\t\t\tcallback: (response, convo) => {\n\t\t\t\tconvo.sessionStart.tasksToWorkOnHash = tasksToWorkOnHash;\n\t\t\t\tconfirmTimeForTasks(response,convo);\n\t\t\t\tconvo.next();\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tpattern: bot.utterances.no,\n\t\t\tcallback: (response, convo) => {\n\t\t\t\tconvo.say(\"Let's give this another try then :repeat_one:\");\n\t\t\t\tconvo.say(taskListMessage);\n\t\t\t\taskWhichTasksToWorkOn(response, convo);\n\t\t\t\tconvo.next();\n\t\t\t}\n\t\t}\n\t]);\n\n}\n\n// calculate ask about the time to the given tasks\nfunction confirmTimeForTasks(response, convo) {\n\n\tconst { task }                = convo;\n\tconst { bot, source_message } = task;\n\tconst { tasksToWorkOnHash, dailyTasks }  = convo.sessionStart;\n\tconst SlackUserId = response.user;\n\n\tconsole.log(\"convo sessino start:\");\n\tconsole.log(convo.sessionStart);\n\n\tvar totalMinutes = 0;\n\tfor (var key in tasksToWorkOnHash) {\n\t\tconst task = tasksToWorkOnHash[key];\n\t\tconsole.log(\"this specific daily task:\");\n\t\tconsole.log(task);\n\t\tvar { dataValues: { minutes } } = task;\n\t\ttotalMinutes += parseInt(minutes);\n\t}\n\n\t// get timezone of user before continuing\n\tbot.api.users.list({\n  \tpresence: 1\n  }, (err, response) => {\n  \tconst { members } = response; // members are all users registered to your bot\n\n  \tfor (var i = 0; i < members.length; i++) {\n  \t\tif (members[i].id == SlackUserId) {\n  \t\t\tvar timeZoneObject = {};\n  \t\t\ttimeZoneObject.tz = members[i].tz;\n  \t\t\ttimeZoneObject.tz_label = members[i].tz_label;\n  \t\t\ttimeZoneObject.tz_offset = members[i].tz_offset;\n  \t\t\tconvo.sessionStart.timeZone = timeZoneObject;\n  \t\t\tbreak;\n  \t\t}\n  \t}\n\n  \tvar { timeZone } = convo.sessionStart;\n  \tif (timeZone && timeZone.tz) {\n  \t\ttimeZone = timeZone.tz;\n  \t} else {\n  \t\ttimeZone = \"America/New_York\"; // THIS IS WRONG AND MUST BE FIXED\n  \t\t// SOLUTION IS MOST LIKELY TO ASK USER HERE WHAT THEIR TIMEZONE IS.\n  \t}\n  \tconsole.log(`Your timezone is: ${timeZone}`);\n  \tvar calculatedTimeObject = moment().tz(timeZone).add(totalMinutes, 'minutes')\n  \tvar calculatedTimeString = calculatedTimeObject.format(\"h:mm a\");\n  \tconvo.say(`Nice! That should take until ${calculatedTimeString} based on your estimate`);\n  \tconvo.ask(`Would you like to work until ${calculatedTimeString}?`, [\n\t\t\t{\n\t\t\t\tpattern: bot.utterances.yes,\n\t\t\t\tcallback: (response, convo) => {\n\n\t\t\t\t\t// success! now save session time info for the user\n\t\t\t\t\tconvo.sessionStart.totalMinutes         = totalMinutes;\n\t\t\t\t\tconvo.sessionStart.calculatedTime       = calculatedTimeString;\n\t\t\t\t\tconvo.sessionStart.calculatedTimeObject = calculatedTimeObject;\n\n\t\t\t\t\taskForCheckIn(response, convo);\n\t\t\t\t\tconvo.next();\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: bot.utterances.no,\n\t\t\t\tcallback: (response, convo) => {\n\t\t\t\t\taskForCustomTotalMinutes(response, convo);\n\t\t\t\t\tconvo.next();\n\t\t\t\t}\n\t\t\t}\n\t\t]);\n\n  });\n\n}\n\n// ask for custom amount of time to work on\nfunction askForCustomTotalMinutes(response, convo) {\n\n\tconst { task }                = convo;\n\tconst { bot, source_message } = task;\n\tconst SlackUserId = response.user;\n\n\tconvo.ask(\"What time would you like to work until? You can also tell me the duration you'd like to work, like `55 minutes` :upside_down_face:\", (response, convo) => {\n\n\t\tvar { intentObject: { entities } } = response;\n\t\t// for time to tasks, these wit intents are the only ones that makes sense\n\t\tif (entities.duration || entities.custom_time) {\n\t\t\tconfirmCustomTotalMinutes(response, convo);\n\t\t} else {\n\t\t\t// invalid\n\t\t\tconvo.say(\"I'm sorry, I didn't catch that :dog:\");\n\t\t\tconvo.repeat();\n\t\t}\n\n\t\tconvo.next();\n\n\t});\n\n};\n\nfunction confirmCustomTotalMinutes(response, convo) {\n\n\tconst { task }                = convo;\n\tconst { bot, source_message } = task;\n\tconst SlackUserId = response.user;\n\n\tvar { timeZone: { tz } } = convo.sessionStart;\n\n\t// use Wit to understand the message in natural language!\n\tvar { intentObject: { entities } } = response;\n\tvar customTimeObject; // moment object of time\n\tvar customTimeString; // format to display (`h:mm a`)\n\tvar customTimeStringForDB; // format to put in DB (`YYYY-MM-DD HH:mm:ss`)\n\tif (entities.duration) {\n\n\t\tvar durationArray = entities.duration;\n\t\tvar durationSeconds = 0;\n\t\tfor (var i = 0; i < durationArray.length; i++) {\n\t\t\tdurationSeconds += durationArray[i].normalized.value;\n\t\t}\n\t\tvar durationMinutes = Math.floor(durationSeconds / 60);\n\n\t\t// add minutes to now\n\t\tcustomTimeObject = moment().tz(tz).add(durationSeconds, 'seconds');\n\t\tcustomTimeString = customTimeObject.format(\"h:mm a\");\n\n\t} else if (entities.custom_time) {\n\t\t// get rid of timezone to make it tz-neutral\n\t\t// then create a moment-timezone object with specified timezone\n\t\tvar timeStamp = entities.custom_time[0].value;\n\n\t\t// create time object based on user input + timezone\n\t\tcustomTimeObject = createMomentObjectWithSpecificTimeZone(timeStamp, tz);\n\t\tcustomTimeString = customTimeObject.format(\"h:mm a\");\n\n\t}\n\n\tconvo.ask(`So you'd like to work until ${customTimeString}?`, [\n\t\t{\n\t\t\tpattern: bot.utterances.yes,\n\t\t\tcallback: (response, convo) => {\n\n\t\t\t\tvar now             = moment();\n\t\t\t\tvar minutesDuration = Math.round(moment.duration(customTimeObject.diff(now)).asMinutes());\n\n\t\t\t\t// success! now save session time info for the user\n\t\t\t\tconvo.sessionStart.totalMinutes         = minutesDuration;\n\t\t\t\tconvo.sessionStart.calculatedTime       = customTimeString;\n\t\t\t\tconvo.sessionStart.calculatedTimeObject = customTimeObject;\n\n\t\t\t\taskForCheckIn(response, convo);\n\t\t\t\tconvo.next();\n\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tpattern: bot.utterances.no,\n\t\t\tcallback: (response, convo) => {\n\t\t\t\tconvo.ask(\"Yikes, my bad. Let's try this again. Just tell me how many minutes (`ex. 45 min`) or until what time (`ex. 3:15pm`) you'd like to work right now\", (response, convo) => {\n\t\t\t\t\tconfirmCustomTotalMinutes(response, convo);\n\t\t\t\t\tconvo.next();\n\t\t\t\t});\n\t\t\t\tconvo.next();\n\t\t\t}\n\t\t}\n\t]);\n\n}\n\n// ask if user wants a checkin during middle of session\nfunction askForCheckIn(response, convo) {\n\n\tconst { task }                = convo;\n\tconst { bot, source_message } = task;\n\tconst SlackUserId = response.user;\n\n\tconvo.ask(\"Boom :boom: Would you like me to check in with you during this session to make sure you're on track?\", [\n\t\t{\n\t\t\tpattern: bot.utterances.yes,\n\t\t\tcallback: (response, convo) => {\n\t\t\t\tconvo.say(\"Sure thing! Let me know what time you want me to check in with you\");\n\t\t\t\tconvo.ask(\"I can also check in a certain number of minutes or hours from now, like `40 minutes` or `1 hour`\", (response, convo) => {\n\n\t\t\t\t\tvar { intentObject: { entities } } = response;\n\t\t\t\t\t// for time to tasks, these wit intents are the only ones that makes sense\n\t\t\t\t\tif (entities.duration || entities.custom_time) {\n\t\t\t\t\t\tconfirmCheckInTime(response, convo);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// invalid\n\t\t\t\t\t\tconvo.say(\"I'm sorry, I didn't catch that :dog:\");\n\t\t\t\t\t\tconvo.say(\"Please put either a time like `2:41pm`, or a number of minutes or hours like `35 minutes`\");\n\t\t\t\t\t\tconvo.silentRepeat();\n\t\t\t\t\t}\n\n\t\t\t\t\tconvo.next();\n\n\t\t\t\t}, { 'key' : 'respondTime' });\n\t\t\t\tconvo.next();\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tpattern: bot.utterances.no,\n\t\t\tcallback: (response, convo) => {\n\t\t\t\tconvo.next();\n\t\t\t}\n\t\t}\n\t]);\n\n}\n\n// confirm check in time with user\nfunction confirmCheckInTime(response, convo) {\n\n\tconst { task }                = convo;\n\tconst { bot, source_message } = task;\n\tconst SlackUserId = response.user;\n\n\tvar { timeZone: { tz } } = convo.sessionStart;\n\n\t// use Wit to understand the message in natural language!\n\tvar { intentObject: { entities } } = response;\n\tvar checkinTimeObject; // moment object of time\n\tvar checkinTimeString; // format to display (`h:mm a`)\n\tvar checkinTimeStringForDB; // format to put in DB (`YYYY-MM-DD HH:mm:ss`)\n\tif (entities.duration) {\n\n\t\tvar durationArray = entities.duration;\n\t\tvar durationSeconds = 0;\n\t\tfor (var i = 0; i < durationArray.length; i++) {\n\t\t\tdurationSeconds += durationArray[i].normalized.value;\n\t\t}\n\t\tvar durationMinutes = Math.floor(durationSeconds / 60);\n\n\t\t// add minutes to now\n\t\tcheckinTimeObject = moment().tz(tz).add(durationSeconds, 'seconds');\n\t\tcheckinTimeString = checkinTimeObject.format(\"h:mm a\");\n\n\t} else if (entities.custom_time) {\n\t\t// get rid of timezone to make it tz-neutral\n\t\t// then create a moment-timezone object with specified timezone\n\t\tvar timeStamp = entities.custom_time[0].value;\n\n\t\t// create time object based on user input + timezone\n\t\tcheckinTimeObject = createMomentObjectWithSpecificTimeZone(timeStamp, tz);\n\t\tcheckinTimeString = checkinTimeObject.format(\"h:mm a\");\n\n\t}\n\n\tconvo.ask(`I'll be checking in with you at ${checkinTimeString}. Is that correct?`, [\n\t\t{\n\t\t\tpattern: bot.utterances.yes,\n\t\t\tcallback: (response, convo) => {\n\n\t\t\t\tvar now             = moment();\n\t\t\t\tvar minutesDuration = Math.round(moment.duration(checkinTimeObject.diff(now)).asMinutes());\n\n\t\t\t\t// success! now save checkin time info for the user\n\t\t\t\tconvo.sessionStart.checkinTimeObject = checkinTimeObject;\n\t\t\t\tconvo.sessionStart.checkinTimeString = checkinTimeString;\n\t\t\t\t\n\t\t\t\taskForReminderDuringCheckin(response, convo);\n\t\t\t\tconvo.next();\n\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tpattern: bot.utterances.no,\n\t\t\tcallback: (response, convo) => {\n\t\t\t\tconvo.say(`Let's rewind :vhs: :rewind:`);\n\t\t\t\tconvo.ask(\"What time would you like me to check in with you? Just tell me a time or a certain number of minutes from the start of your session you'd like me to check in\", (response, convo) => {\n\t\t\t\t\tconfirmCheckInTime(response, convo);\n\t\t\t\t\tconvo.next();\n\t\t\t\t});\n\t\t\t\tconvo.next();\n\t\t\t}\n\t\t}\n\t]);\n\n\n}\n\nfunction askForReminderDuringCheckin(response, convo) {\n\n\tconst { task }                = convo;\n\tconst { bot, source_message } = task;\n\tconst SlackUserId = response.user;\n\n\tconvo.say(\"Last thing - is there anything you'd like me to remind you during the check in?\");\n\tconvo.ask(\"This could be a note like `call Eileen` or `should be on the second section of the proposal by now`\", [\n\t\t{\n\t\t\tpattern: bot.utterances.yes,\n\t\t\tcallback: (response, convo) => {\n\t\t\t\tconvo.ask(`What note would you like me to remind you about?`, (response, convo) => {\n\t\t\t\t\tgetReminderNoteFromUser(response, convo);\n\t\t\t\t\tconvo.next();\n\t\t\t\t});\n\n\t\t\t\tconvo.next();\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tpattern: bot.utterances.no,\n\t\t\tcallback: (response, convo) => {\n\t\t\t\tconvo.next();\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tdefault: true,\n\t\t\tcallback: (response, convo) => {\n\t\t\t\t// we are assuming anything else is the reminderNote\n\t\t\t\tgetReminderNoteFromUser(response, convo);\n\t\t\t\tconvo.next();\n\t\t\t}\n\t\t}\n\t], { 'key' : 'reminderNote' });\n\n}\n\nfunction getReminderNoteFromUser(response, convo) {\n\n\tconst { task }                = convo;\n\tconst { bot, source_message } = task;\n\tconst SlackUserId = response.user;\n\n\tconst note = response.text;\n\n\tconst { sessionStart: { checkinTimeObject, checkinTimeString } } = convo;\n\n\tconvo.ask(`Does this look good: \\`${note}\\`?`, [\n\t\t{\n\t\t\tpattern: bot.utterances.yes,\n\t\t\tcallback: (response, convo) => {\n\n\t\t\t\tconvo.sessionStart.reminderNote = note;\n\t\t\t\tconvo.next();\n\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tpattern: bot.utterances.no,\n\t\t\tcallback: (response, convo) => {\n\t\t\t\tconvo.ask(`Just tell me a one-line note and I'll remind you about it at ${checkinTimeString}!`, (response, convo) => {\n\t\t\t\t\tgetReminderNoteFromUser(response, convo);\n\t\t\t\t\tconvo.next();\n\t\t\t\t})\n\t\t\t\tconvo.next();\n\t\t\t}\n\t\t}\n\t]);\n\n}\n"]}