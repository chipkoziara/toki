{"version":3,"sources":["../../../../src/bot/controllers/work_sessions/endWorkSession.js"],"names":[],"mappings":"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","file":"endWorkSession.js","sourcesContent":["import os from 'os';\nimport { wit } from '../index';\nimport moment from 'moment-timezone';\nimport { randomInt } from '../../lib/botResponses';\nimport http from 'http';\nimport bodyParser from 'body-parser';\n\nimport models from '../../../app/models';\nimport { convertToSingleTaskObjectArray, convertArrayToTaskListMessage } from '../../lib/messageHelpers';\nimport intentConfig from '../../lib/intents';\n\n// END OF A WORK SESSION\nexport default function(controller) {\n\n\t/**\n\t * \t\tENDING WORK SESSION:\n\t * \t\t\t1) Explict command to finish session early\n\t * \t\t\t2) Your timer has run out\n\t */\n\n\t// User wants to finish session early (wit intent)\n\tcontroller.hears(['done_session'], 'direct_message', wit.hears, (bot, message) => {\n\n\t\t/**\n\t\t * \t\t\tcheck if user has open session (should only be one)\n\t\t * \t\t\t\t\tif yes, trigger finish and end_session flow\n\t\t * \t\t\t  \tif no, reply with confusion & other options\n\t\t */\n\t\t\n\t\tconst SlackUserId = message.user;\n\t\tconsole.log(\"done message:\");\n\t\tconsole.log(message);\n\n\t\t// no open sessions\n\t\tbot.send({\n\t\t\ttype: \"typing\",\n\t\t\tchannel: message.channel\n\t\t});\n\n\t\tsetTimeout(() => {\n\n\t\t\tmodels.User.find({\n\t\t\t\twhere: [`\"SlackUser\".\"SlackUserId\" = ?`, SlackUserId ],\n\t\t\t\tinclude: [\n\t\t\t\t\tmodels.SlackUser\n\t\t\t\t]\n\t\t\t})\n\t\t\t.then((user) => {\n\t\t\t\treturn user.getWorkSessions({\n\t\t\t\t\twhere: [ `\"open\" = ?`, true ]\n\t\t\t\t});\n\t\t\t})\n\t\t\t.then((workSessions) => {\n\t\t\t\t// if open work session, confirm end early\n\t\t\t\t// else, user MUST say `done` to trigger end (this properly simulates user is done with that session)\n\t\t\t\tif (workSessions.length > 0) {\n\t\t\t\t\tbot.startPrivateConversation( { user: SlackUserId }, (err, convo) => {\n\t\t\t\t\t\tconvo.ask(`Are you finished with your session?`, [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpattern: bot.utterances.yes,\n\t\t\t\t\t\t\t\tcallback: (response, convo) => {\n\t\t\t\t\t\t\t\t\tconvo.finishedWithSession = true;\n\t\t\t\t\t\t\t\t\tconvo.next();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpattern: bot.utterances.no,\n\t\t\t\t\t\t\t\tcallback: (response, convo) => {\n\t\t\t\t\t\t\t\t\tconvo.say(`Oh, never mind then! Keep up the work :weight_lifter:`);\n\t\t\t\t\t\t\t\t\tconvo.next();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]);\n\t\t\t\t\t\tconvo.on('end', (convo) => {\n\t\t\t\t\t\t\tif (convo.finishedWithSession) {\n\t\t\t\t\t\t\t\tcontroller.trigger('end_session', [bot, { SlackUserId }]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tif (message.text == `done`) {\n\t\t\t\t\t\tcontroller.trigger('end_session', [bot, { SlackUserId }]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbot.startPrivateConversation( { user: SlackUserId }, (err, convo) => {\n\t\t\t\t\t\t\tconvo.say(`I'm not absolutely sure what you mean :thinking_face:. If you're ending a session, reply \\`done\\``);\n\t\t\t\t\t\t\tconvo.next();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t}, 1250);\n\n\t\t\t\n\t});\n\n\t// session timer is up\n\tcontroller.on('session_timer_up', (bot, config) => {\n\n\t\t/**\n\t\t * \t\tTimer is up. Give user option to extend session or start reflection\n\t\t */\n\n\t\tconst { SlackUserId } = config;\n\n\t\t// making this just a reminder now so that user can end his own session as he pleases\n\t\tbot.startPrivateConversation( { user: SlackUserId }, (err, convo) => {\n\n\t\t\tconvo.say(`:timer_clock: time's up. Reply \\`done\\` when you're ready to end the session`);\n\t\t\tconvo.next();\n\t\t\t\n\t\t});\n\n\t});\n\n\t// the actual end_session flow\n\tcontroller.on('end_session', (bot, config) => {\n\n\t\t/**\n\t\t * \t\tUser has agreed for session to end at this point\n\t\t */\n\n\t\tconst { SlackUserId } = config;\n\n\t\tbot.startPrivateConversation({ user: SlackUserId }, (err, convo) => {\n\n\t\t\t// object that contains values important to this conversation\n\t\t\tconvo.sessionEnd = {\n\t\t\t\tSlackUserId,\n\t\t\t\tpostSessionDecision: false, // what is the user's decision? (break, another session, etc.)\n\t\t\t\treminders: [], // there will be lots of potential reminders\n\t\t\t\ttasksCompleted: []\n\t\t\t};\n\n\t\t\tmodels.User.find({\n\t\t\t\twhere: [`\"SlackUser\".\"SlackUserId\" = ?`, SlackUserId ],\n\t\t\t\tinclude: [\n\t\t\t\t\tmodels.SlackUser\n\t\t\t\t]\n\t\t\t})\n\t\t\t.then((user) => {\n\n\t\t\t\tconvo.sessionEnd.UserId = user.id;\n\n\t\t\t\t// temporary fix to get tasks\n\t\t\t\tvar timeAgoForTasks = moment().subtract(14, 'hours').format(\"YYYY-MM-DD HH:mm:ss\");\n\t\t\t\treturn user.getDailyTasks({\n\t\t\t\t\twhere: [ `\"Task\".\"done\" = ? AND \"DailyTask\".\"createdAt\" > ? AND \"DailyTask\".\"type\" = ?`, false, timeAgoForTasks, \"live\" ],\n\t\t\t\t\torder: `\"DailyTask\".\"priority\" ASC`,\n\t\t\t\t\tinclude: [ models.Task ]\n\t\t\t\t});\n\t\t\t})\n\t\t\t.then((dailyTasks) => {\n\n\t\t\t\tvar taskArray              = convertToSingleTaskObjectArray(dailyTasks, \"daily\");\n\t\t\t\tconvo.sessionEnd.taskArray = taskArray;\n\t\t\t\tvar taskListMessage        = convertArrayToTaskListMessage(taskArray);\n\n\t\t\t\tif (taskArray.length == 0) {\n\t\t\t\t\tconvo.say(\"You don't have any tasks on today's list! Great work :punch:\");\n\t\t\t\t\tconvo.sessionEnd.hasNoTasksToWorkOn = true;\n\t\t\t\t\ttaskListMessage = \"Say `next` to keep going\";\n\t\t\t\t} else {\n\t\t\t\t\tconvo.say(\"Which task(s) did you get done? Just write which number(s) `i.e. 1, 2`\");\n\t\t\t\t}\n\n\t\t\t\tconvo.ask(taskListMessage, (response, convo) => {\n\n\t\t\t\t\t/**\n\t\t\t\t\t * \t\t4 possible responses:\n\t\t\t\t\t * \t\t\t1. write numbers down\n\t\t\t\t\t * \t\t\t2. says \"didn't get one done\"\n\t\t\t\t\t * \t\t\t3. \"was distracted\"\n\t\t\t\t\t * \t\t\t4. \"did something else\"\n\t\t\t\t\t * \t\t\twill only deal with the top 2 for now\n\t\t\t\t\t */\n\t\t\t\t\t\n\t\t\t\t\tvar { intentObject: { entities } } = response;\n\t\t\t\t\tvar tasksCompleted = response.text;\n\n\t\t\t\t\tvar tasksCompletedSplitArray = tasksCompleted.split(/(,|and)/);\n\n\t\t\t\t\t// IF THE USER HAS NO TASKS ON DAILY TASK LIST\n\t\t\t\t\tif (convo.sessionEnd.hasNoTasksToWorkOn) {\n\t\t\t\t\t\taskUserPostSessionOptions(response, convo);\n\t\t\t\t\t\tconvo.next();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// if we capture 0 valid tasks from string, then we start over\n\t\t\t\t\tvar numberRegEx              = new RegExp(/[\\d]+/);\n\t\t\t\t\tvar taskNumberCompletedArray = [];\n\t\t\t\t\ttasksCompletedSplitArray.forEach((taskString) => {\n\t\t\t\t\t\tconsole.log(`task string: ${taskString}`);\n\t\t\t\t\t\tvar taskNumber = taskString.match(numberRegEx);\n\t\t\t\t\t\tif (taskNumber) {\n\t\t\t\t\t\t\ttaskNumber = parseInt(taskNumber[0]);\n\t\t\t\t\t\t\tif (taskNumber <= taskArray.length) {\n\t\t\t\t\t\t\t\ttaskNumberCompletedArray.push(taskNumber);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tif (taskNumberCompletedArray.length == 0) {\n\t\t\t\t\t\t// no tasks completed\n\t\t\t\t\t\tconvo.say(\"No worries! :smile_cat:\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// get the actual ids\n\t\t\t\t\t\tvar tasksCompletedArray = [];\n\t\t\t\t\t\ttaskNumberCompletedArray.forEach((taskNumber) => {\n\t\t\t\t\t\t\tvar index = taskNumber - 1; // to make 0-index based\n\t\t\t\t\t\t\tif (taskArray[index])\n\t\t\t\t\t\t\t\ttasksCompletedArray.push(taskArray[index].dataValues.id);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconvo.sessionEnd.tasksCompleted = tasksCompletedArray;\n\t\t\t\t\t\tconvo.say(\"Great work :punch:\");\n\t\t\t\t\t}\n\n\t\t\t\t\taskUserPostSessionOptions(response, convo);\n\t\t\t\t\tconvo.next();\n\t\t\t\t\t\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconvo.on('end', (convo) => {\n\t\t\t\tconsole.log(\"SESSION END!!!\");\n\n\t\t\t\tvar responses = convo.extractResponses();\n\t\t\t\tvar {sessionEnd } = convo;\n\n\t\t\t\tif (convo.status == 'completed') {\n\n\t\t\t\t\tconsole.log(\"CONVO SESSION END: \");\n\t\t\t\t\tconsole.log(convo.sessionEnd);\n\n\t\t\t\t\t// went according to plan\n\t\t\t\t\tconst { SlackUserId, UserId, postSessionDecision, reminders, tasksCompleted, taskArray } = convo.sessionEnd;\n\n\t\t\t\t\t// end all open sessions and reminder checkins (type `work_session`) the user might have\n\t\t\t\t\tmodels.User.find({\n\t\t\t\t\t\twhere: [`\"User\".\"id\" = ?`, UserId ],\n\t\t\t\t\t\tinclude: [ models.SlackUser ]\n\t\t\t\t\t})\n\t\t\t\t\t.then((user) => {\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * \t\t~~ END OF WORK SESSION ~~\n\t\t\t\t\t\t * \t\t\t1. cancel all `break` and `checkin` reminders\n\t\t\t\t\t\t * \t\t\t2. mark said `tasks` as done\n\t\t\t\t\t\t * \t\t\t3. set new `reminders` (i.e break)\n\t\t\t\t\t\t * \t\t\t4. close open worksessions and start new one if requested\n\t\t\t\t\t\t */\n\n\t\t\t\t\t\t// cancel all checkin reminders (type: `work_session` or `break`)\n\t\t\t\t\t\t// AFTER this is done, put in new break\n\t\t\t\t\t\tuser.getReminders({\n\t\t\t\t\t\t\twhere: [ `\"open\" = ? AND \"type\" IN (?)`, true, [\"work_session\", \"break\"] ]\n\t\t\t\t\t\t}).\n\t\t\t\t\t\tthen((oldReminders) => {\n\t\t\t\t\t\t\toldReminders.forEach((reminder) => {\n\t\t\t\t\t\t\t\treminder.update({\n\t\t\t\t\t\t\t\t\t\"open\": false\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// set reminders (usually a break)\n\t\t\t\t\t\treminders.forEach((reminder) => {\n\t\t\t\t\t\t\tconst { remindTime, customNote, type } = reminder;\n\t\t\t\t\t\t\tmodels.Reminder.create({\n\t\t\t\t\t\t\t\tUserId,\n\t\t\t\t\t\t\t\tremindTime,\n\t\t\t\t\t\t\t\tcustomNote,\n\t\t\t\t\t\t\t\ttype\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// mark appropriate tasks as done\n\t\t\t\t\t\ttaskArray.forEach((task) => {\n\t\t\t\t\t\t\tif (tasksCompleted.indexOf(task.dataValues.id) > -1) {\n\t\t\t\t\t\t\t\t// get daily tasks\n\t\t\t\t\t\t\t\tmodels.DailyTask.find({\n\t\t\t\t\t\t\t\t\twhere: { id: task.dataValues.id },\n\t\t\t\t\t\t\t\t\tinclude: [ models.Task] \n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.then((dailyTask) => {\n\t\t\t\t\t\t\t\t\tif (dailyTask) {\n\t\t\t\t\t\t\t\t\t\tdailyTask.Task.updateAttributes({\n\t\t\t\t\t\t\t\t\t\t\tdone: true\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// end all open work sessions\n\t\t\t\t\t\t// make decision afterwards (to ensure you have no sessions open if u want to start a new one)\n\t\t\t\t\t\tuser.getWorkSessions({\n\t\t\t\t\t\t\twhere: [ `\"open\" = ?`, true ]\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then((workSessions) => {\n\t\t\t\t\t\t\tvar endTime = moment().format(\"YYYY-MM-DD HH:mm:ss\");\n\t\t\t\t\t\t\tworkSessions.forEach((workSession) => {\n\t\t\t\t\t\t\t\tworkSession.update({\n\t\t\t\t\t\t\t\t\tendTime,\n\t\t\t\t\t\t\t\t\t\"open\": false\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tswitch (postSessionDecision) {\n\t\t\t\t\t\t\t\tcase intentConfig.WANT_BREAK:\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase intentConfig.END_DAY:\n\t\t\t\t\t\t\t\t\tcontroller.trigger('trigger_day_end', [bot, { SlackUserId }]);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase intentConfig.START_SESSION:\n\t\t\t\t\t\t\t\t\tcontroller.trigger('confirm_new_session', [bot, { SlackUserId }]);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tdefault: break;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t});\n\n\t\t\t\t\t});\n\t\t\t\t\n\n\t\t\t\t} else {\n\t\t\t\t\t// ending convo prematurely\n\t\t\t\t\tconsole.log(\"ending convo early: \\n\\n\\n\\n\");\n\t\t\t\t\tconsole.log(\"controller:\");\n\t\t\t\t\tconsole.log(controller);\n\t\t\t\t\tconsole.log(\"\\n\\n\\n\\n\\nbot:\");\n\t\t\t\t\tconsole.log(bot);\n\n\t\t\t\t\t// FIX POTENTIAL PITFALLS HERE\n\t\t\t\t\tif (!sessionEnd.postSessionDecision) {\n\t\t\t\t\t\tconvo.say(\"I'm not sure went wrong here :dog: Please let my owners know\");\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t});\n\n\t\t});\n\n\t});\n\n};\n\nfunction askUserPostSessionOptions(response, convo) {\n\n\tconst { task }                = convo;\n\tconst { bot, source_message } = task;\n\t\n\tconvo.say(\"I recommend taking a 15 minute break after about 90 minutes of focused work to keep your mind and attention fresh :tangerine:\");\n\tconvo.say(\"Breaks are great times to read books and articles, or take a walk outside to get some fresh air :books: :walking:\");\n\tconvo.ask(\"Would you like to take a break now, or start a new session?\", (response, convo) => {\n\n\t\t/**\n\t\t * \t\tDoes user want a break?\n\t\t * \t\tpossible answers:\n\t\t * \t\t\t- break [intent `want_break`]\n\t\t * \t\t\t- new session [intent `start_session`]\n\t\t * \t\t\t- leaving for a bit\n\t\t * \t\t\t- done for the day [intent `end_day`]\n\t\t */\n\t\t\n\t\tvar { intentObject: { entities } } = response;\n\t\tvar { intent }                     = entities;\n\t\tvar intentValue                    = (intent && intent[0]) ? intent[0].value : null;\n\t\tvar responseMessage                = response.text;\n\n\t\tconsole.log(\"responseMessage: \"+responseMessage);\n\n\t\tif (intentValue && (intentValue == intentConfig.WANT_BREAK || intentValue == intentConfig.START_SESSION || intentValue == intentConfig.END_DAY)) {\n\t\t\tconsole.log(\"in here?? wtf\");\n\t\t\t// there is an intent\n\t\t\tswitch (intentValue) {\n\t\t\t\tcase intentConfig.WANT_BREAK:\n\t\t\t\t\t\n\t\t\t\t\tconvo.sessionEnd.postSessionDecision = intentConfig.WANT_BREAK;\n\n\t\t\t\t\t// calculate break duration through wit\n\t\t\t\t\tvar durationSeconds = 0;\n\t\t\t\t\tif (entities.break_duration) {\n\t\t\t\t\t\tvar durationArray = entities.break_duration;\n\t\t\t\t\t\tfor (var i = 0; i < durationArray.length; i++) {\n\t\t\t\t\t\t\tdurationSeconds += durationArray[i].normalized.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (entities.duration) {\n\t\t\t\t\t\tvar durationArray = entities.duration;\n\t\t\t\t\t\tfor (var i = 0; i < durationArray.length; i++) {\n\t\t\t\t\t\t\tdurationSeconds += durationArray[i].normalized.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdurationSeconds = 15 * 60; // default to 15 min break\n\t\t\t\t\t}\n\t\t\t\t\tvar durationMinutes = Math.floor(durationSeconds / 60);\n\n\t\t\t\t\tconvo.sessionEnd.breakDuration = durationMinutes;\n\t\t\t\t\t\n\t\t\t\t\tconvo.say(`Great! I'll check in with you in ${durationMinutes} minutes :smile:`);\n\t\t\t\t\tconvo.sessionEnd.postSessionDecision = intentConfig.WANT_BREAK;\n\n\t\t\t\t\t// calculate break time and add reminder\n\t\t\t\t\tvar checkinTimeStamp =  moment().add(durationMinutes, 'minutes').format(\"YYYY-MM-DD HH:mm:ss\");\n\t\t\t\t\tconvo.sessionEnd.reminders.push({\n\t\t\t\t\t\tcustomNote: `It's been ${durationMinutes} minutes. Let me know when you're ready to start a session`,\n\t\t\t\t\t\tremindTime: checkinTimeStamp,\n\t\t\t\t\t\ttype: \"break\"\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase intentConfig.START_SESSION:\n\t\t\t\t\tconvo.sessionEnd.postSessionDecision = intentConfig.START_SESSION;\n\t\t\t\t\tbreak;\n\t\t\t\tcase intentConfig.END_DAY:\n\t\t\t\t\tconvo.sessionEnd.postSessionDecision = intentConfig.END_DAY;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else if (responseMessage == \"be back later\") {\n\t\t\tconsole.log(\"in here as you should be wtf\\n\\n\\n\\n\");\n\t\t\tconvo.say(\"I'll be here when you get back!\");\n\t\t\tconvo.say(\"You can also ask for me to check in with you at a specific time later :grin:\"); // if user wants reminder, simply input a reminder outside of this convo\n\t\t} else {\n\t\t\t// let's encourage an intent\n\t\t\tconvo.say(\"Sorry I didn't get that :dog:. Let me know if you want to `take a break` or `start another session`. If you're leaving for a bit, just say `be back later`\");\n\t\t\tconvo.repeat();\n\t\t}\n\n\t\tconvo.next();\n\t});\n\tconvo.next();\n}\n\n"]}