{"version":3,"sources":["../../../../src/bot/controllers/days/endDay.js"],"names":[],"mappings":"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","file":"endDay.js","sourcesContent":["import os from 'os';\nimport { wit } from '../index';\nimport http from 'http';\nimport bodyParser from 'body-parser';\nimport moment from 'moment-timezone';\n\nimport models from '../../../app/models';\n\nimport { randomInt } from '../../lib/botResponses';\nimport { convertToSingleTaskObjectArray, convertResponseObjectsToTaskArray, convertArrayToTaskListMessage, convertTimeStringToMinutes } from '../../lib/messageHelpers';\nimport intentConfig from '../../lib/intents';\n\nexport const FINISH_WORD = 'done';\nexport const EXIT_EARLY_WORDS = ['exit', 'stop','never mind','quit'];\n\n// base controller for end day\nexport default function(controller) {\n\n\t// programmatic trigger of actual day start flow: `end_day_flow`\n\tcontroller.on('trigger_day_end', (bot, config) => {\n\n\t\tconst { SlackUserId } = config;\n\t\tcontroller.trigger(`end_day_flow`, [ bot, { SlackUserId } ]);\n\n\t})\n\n\t/**\n\t * \t\tUser directly asks to end day\n\t * \t\t\t\t~* via Wit *~\n\t * \t\t\tconfirm for `end_day_flow`\n\t */\n\tcontroller.hears(['end_day'], 'direct_message', wit.hears, (bot, message) => {\n\n\t\tconst SlackUserId = message.user;\n\n\t\tbot.send({\n\t\t\ttype: \"typing\",\n\t\t\tchannel: message.channel\n\t\t});\n\t\tsetTimeout(()=>{\n\n\t\t\tmodels.User.find({\n\t\t\t\twhere: [`\"SlackUser\".\"SlackUserId\" = ?`, SlackUserId ],\n\t\t\t\tinclude: [\n\t\t\t\t\tmodels.SlackUser\n\t\t\t\t]\n\t\t\t})\n\t\t\t.then((user) => {\n\n\t\t\t\t// ping to start a day if they have not yet\n\t\t\t\tuser.getSessionGroups({\n\t\t\t    order: `\"SessionGroup\".\"createdAt\" DESC`,\n\t\t\t    limit: 1\n\t\t    })\n\t\t    .then((sessionGroups) => {\n\n\t\t      // should start day\n\t\t      var shouldStartDay = false;\n\t\t      if (sessionGroups.length == 0) {\n\t\t      \tshouldStartDay = true;\n\t\t      } else if (sessionGroups[0] && sessionGroups[0].type == \"end_work\") {\n\t\t      \tshouldStartDay = true;\n\t\t      }\n\t\t      if (shouldStartDay) {\n\t\t      \tbot.startPrivateConversation({ user: SlackUserId }, (err, convo) => {\n\t\t\t\t\t\t\tconvo.say(\"You have not started a day yet! Let me know when you want to `start a day` together :smile:\");\n\t\t\t\t\t\t\tconvo.next();\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn;\n\t\t      }\n\n\t\t      bot.startPrivateConversation({ user: SlackUserId }, (err, convo) => {\n\n\t\t\t\t\t\tvar name              = user.nickName || user.email;\n\t\t\t\t\t\tconvo.name            = name;\n\t\t\t\t\t\tconvo.readyToEndDay = false;\n\n\t\t\t\t\t\tconvo.ask(`Hey ${name}! Would you like to end your day?`, [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpattern: bot.utterances.yes,\n\t\t\t\t\t\t\t\tcallback: (response, convo) => {\n\t\t\t\t\t\t\t\t\tconvo.readyToEndDay = true;\n\t\t\t\t\t\t\t\t\tconvo.next();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpattern: bot.utterances.no,\n\t\t\t\t\t\t\t\tcallback: (response, convo) => {\n\t\t\t\t\t\t\t\t\tconvo.say(\"Okay. I'm here whenever you're ready to end your day :wave:\");\n\t\t\t\t\t\t\t\t\tconvo.next();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdefault: true,\n\t\t\t\t\t\t\t\tcallback: (response, convo) => {\n\t\t\t\t\t\t\t\t\tconvo.say(\"Couldn't quite catch that. I'll be here when you're ready to `end your day` :wave:\");\n\t\t\t\t\t\t\t\t\tconvo.next();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]);\n\t\t\t\t\t\tconvo.on('end', (convo) => {\n\t\t\t\t\t\t\tif (convo.readyToEndDay) {\n\t\t\t\t\t\t\t\tcontroller.trigger(`end_day_flow`, [ bot, { SlackUserId }]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\n\t\t\t\t\t});\n\n\t\t    });\n\n\t\t\t\t\t\n\t\t\t});\n\t\t}, 1000);\n\t});\n\n\t/**\n\t* \t~ ACTUAL END OF YOUR DAY ~\n\t* \t\t* Show completed tasks\n\t* \t\t* Show total time of focused sessions\n\t* \t\t* Ask for reflection\n\t* \t\t* \n\t* \t\t\n\t*/\n\tcontroller.on('end_day_flow', (bot, config) => {\n\n\t\tconst { SlackUserId } = config;\n\n\t\tmodels.User.find({\n\t\t\twhere: [`\"SlackUser\".\"SlackUserId\" = ?`, SlackUserId ],\n\t\t\tinclude: [\n\t\t\t\tmodels.SlackUser\n\t\t\t]\n\t\t})\n\t\t.then((user) => {\n\n\t\t\t// get the msot start_work session group to measure\n\t\t\t// a day's worth of work\n\t\t\tuser.getSessionGroups({\n\t\t    order: `\"SessionGroup\".\"createdAt\" DESC`,\n\t\t    limit: 1\n\t    })\n\t    .then((sessionGroups) => {\n\n\t      // should start day\n\t      var shouldStartDay = false;\n\t      if (sessionGroups.length == 0) {\n\t      \tshouldStartDay = true;\n\t      } else if (sessionGroups[0] && sessionGroups[0].type == \"end_work\") {\n\t      \tshouldStartDay = true;\n\t      }\n\t      if (shouldStartDay) {\n\t      \tbot.startPrivateConversation({ user: SlackUserId }, (err, convo) => {\n\t\t\t\t\t\tconvo.say(\"You have not started a day yet! Let's `start a day` together :smile:\");\n\t\t\t\t\t\tconvo.next();\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t      }\n\t      \n\t\t\t\tconst startSessionGroup   = sessionGroups[0]; // the start day\n\t\t\t\tvar startSessionGroupTime = startSessionGroup.dataValues.createdAt;\n\n\t      user.getDailyTasks({\n\t\t\t\t\twhere: [`\"DailyTask\".\"createdAt\" > ? AND \"Task\".\"done\" = ? AND \"DailyTask\".\"type\" = ?`, startSessionGroupTime, true, \"live\"],\n\t\t\t\t\tinclude: [ models.Task ],\n\t\t\t\t\torder: `\"DailyTask\".\"priority\" ASC`\n\t\t\t\t})\n\t\t\t\t.then((dailyTasks) => {\n\n\t\t\t\t\tbot.startPrivateConversation({ user: SlackUserId }, (err, convo) => {\n\n\t\t\t\t\t\tvar name   = user.nickName || user.email;\n\t\t\t\t\t\tconvo.name = name;\n\n\t\t\t\t\t\tconvo.dayEnd = {\n\t\t\t\t\t\t\tUserId: user.id,\n\t\t\t\t\t\t\tendDayDecision: false // what does user want to do with day\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdailyTasks = convertToSingleTaskObjectArray(dailyTasks, \"daily\");\n\t\t\t\t\t\tconvo.dayEnd.dailyTasks        = dailyTasks;\n\t\t\t\t\t\tconvo.dayEnd.startSessionGroup = startSessionGroup;\n\n\t\t\t\t\t\tstartEndDayFlow(err, convo);\n\n\t\t    \t\t// on finish conversation\n\t\t    \t\tconvo.on('end', (convo) => {\n\n\t\t  \t\t\t\tvar responses = convo.extractResponses();\n\n\t\t  \t\t\t\tconsole.log('done!')\n\t\t  \t\t\t\tconsole.log(\"here is end day object:\\n\\n\\n\");\n\t\t  \t\t\t\tconsole.log(convo.dayEnd);\n\t\t  \t\t\t\tconsole.log(\"\\n\\n\\n\");\n\n\t\t    \t\t\tif (convo.status == 'completed') {\n\n\t\t    \t\t\t\tconst { UserId, reflection, dailyTasks, startSessionGroup } = convo.dayEnd;\n\t\t  \t\t\t\t\tconst startSessionGroupTime = moment(startSessionGroup.dataValues.createdAt).format(\"YYYY-MM-DD HH:mm:ss\");\n\n\t\t    \t\t\t\tvar now = moment().format(\"YYYY-MM-DD HH:mm:ss\");\n\n\t\t    \t\t\t\t// log `end_work` and reflection\n\t\t    \t\t\t\tmodels.SessionGroup.create({\n\t\t    \t\t\t\t\ttype: \"end_work\",\n\t\t    \t\t\t\t\tUserId,\n\t\t    \t\t\t\t\treflection\n\t\t    \t\t\t\t});\n\n\t\t    \t\t\t\t// end all open work sessions. should only be one for the user\n\t\t    \t\t\t\tuser.getWorkSessions({\n\t\t\t\t\t\t\t\t\twhere: [ `\"open\" = ?`, true ]\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.then((workSessions) => {\n\t\t\t\t\t\t\t\t\tworkSessions.forEach((workSession) => {\n\t\t\t\t\t\t\t\t\t\tworkSession.update({\n\t\t\t\t\t\t\t\t\t\t\tendTime: now,\n\t\t\t\t\t\t\t\t\t\t\topen: false\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t})\n\n\t\t\t\t\t\t\t\t// put all of user's `live` tasks to pending\n\t\t\t\t\t\t\t\t// make all pending tasks => archived, then all live tasks => pending\n\t\t    \t\t\t\tuser.getDailyTasks({\n\t\t    \t\t\t\t\twhere: [`\"DailyTask\".\"type\" = ?`, \"pending\"]\n\t\t    \t\t\t\t})\n\t\t    \t\t\t\t.then((dailyTasks) => {\n\t\t    \t\t\t\t\tdailyTasks.forEach((dailyTask) => {\n\t\t\t\t\t\t        dailyTask.update({\n\t\t\t\t\t\t          type: \"archived\"\n\t\t\t\t\t\t        });\n\t\t\t\t\t\t      });\n\t\t\t\t\t\t      user.getDailyTasks({\n\t\t\t    \t\t\t\t\twhere: [`\"DailyTask\".\"type\" = ?`, \"live\"]\n\t\t\t    \t\t\t\t})\n\t\t\t    \t\t\t\t.then((dailyTasks) => {\n\t\t\t    \t\t\t\t\tdailyTasks.forEach((dailyTask) => {\n\t\t\t\t\t\t\t        dailyTask.update({\n\t\t\t\t\t\t\t          type: \"pending\"\n\t\t\t\t\t\t\t        });\n\t\t\t\t\t\t\t      });\n\t\t\t    \t\t\t\t});\n\t\t    \t\t\t\t});\n\n\t\t    \t\t\t} else {\n\t\t    \t\t\t\t// default premature end\n\t\t\t\t\t\t\t\tbot.startPrivateConversation({ user: SlackUserId }, (err, convo) => {\n\t\t\t\t\t\t\t\t\tconvo.say(\"Okay! Exiting now. Let me know when you want to start your day!\");\n\t\t\t\t\t\t\t\t\tconvo.next();\n\t\t\t\t\t\t\t\t});\n\t\t    \t\t\t}\n\t\t    \t\t});\n\t\t\t\t\t});\n\t\t\t\t})\n\t    });\n\t\t})\n\t});\n};\n\n// start of end day flow\nfunction startEndDayFlow(response, convo) {\n\n\tconst { task, name }          = convo;\n\tconst { bot, source_message } = task;\n\tconst { dailyTasks }          = convo.dayEnd\n\n\tconvo.say(`Let's wrap up for the day :package:`);\n\n\tif (dailyTasks.length > 0) {\n\t\tconvo.say(`Here are the tasks you completed today:`);\n\t\tvar taskListMessage = convertArrayToTaskListMessage(dailyTasks);\n\t\tconvo.say(taskListMessage);\n\t}\n\n\tgetTotalWorkSessionTime(response, convo);\n\n}\n\n// calculate total work session time before continuing\nfunction getTotalWorkSessionTime(response, convo) {\n\n\tconst { task, name }                    = convo;\n\tconst { bot, source_message }           = task;\n\tconst { UserId, dailyTasks, startSessionGroup } = convo.dayEnd\n\n\tvar startSessionGroupTime = moment(startSessionGroup.dataValues.createdAt);\n\tvar now                   = moment();\n\n\t// get all the work sessions started between now and most recent startSessionGroup\n\tmodels.User.find({\n\t\twhere: { id: UserId }\n\t}).then((user) => {\n\t\treturn user.getWorkSessions({\n\t\t\twhere: [`\"WorkSession\".\"startTime\" > ?`, startSessionGroupTime.format(\"YYYY-MM-DD HH:mm:ss\")]\n\t\t})\n\t})\n\t.then((workSessions) => {\n\t\tvar totalFocusedMinutes = 0;\n\t\t// calculate time between these\n\t\tworkSessions.forEach((workSession) => {\n\t\t\tvar startTime = moment(workSession.startTime);\n\t\t\tvar endTime   = moment(workSession.endTime);\n\n\t\t\t// for the scenario they are ending day to end a session\n\t\t\t// we will do actual updates at `convo.on('end')`\n\t\t\tif (endTime > now)\n\t\t\t\tendTime = now;\n\t\t\tvar minutesDuration = Math.round(moment.duration(endTime.diff(startTime)).asMinutes());\n\t\t\ttotalFocusedMinutes += minutesDuration;\n\n\t\t})\n\t\tconvo.say(`You spent ${totalFocusedMinutes} minutes in focused sessions with me`);\n\t\taskForReflection(response, convo);\n\t});\n\n}\n\n// ask if user wants reflection\nfunction askForReflection(response, convo) {\n\n\tconst { task, name }                    = convo;\n\tconst { bot, source_message }           = task;\n\tconst { dailyTasks, startSessionGroup } = convo.dayEnd\n\n\tconvo.say(`Is there anything specific you'd like to remember about your work day? :pencil:`);\n\tconvo.say(`I'll remember this for you and be able to present it back to you soon :bulb:`);\n\tconvo.ask(`This could be how you felt about your time, focus, or anything else!`, [\n\t\t{\n\t\t\tpattern: bot.utterances.yes,\n\t\t\tcallback: (response, convo) => {\n\t\t\t\tconvo.ask(`Awesome! What would you like to remember about today?`, (response, convo) => {\n\t\t\t\t\tgetReflectionText(response, convo);\n\t\t\t\t\tconvo.next();\n\t\t\t\t});\n\t\t\t\tconvo.next();\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tpattern: bot.utterances.no,\n\t\t\tcallback: (response, convo) => {\n\t\t\t\tconvo.say(\"Totally cool! :thumbsup:\");\n\t\t\t\tconvo.say(\"See you tomorrow! :wave:\");\n\t\t\t\tconvo.next();\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tdefault: true,\n\t\t\tcallback: (response, convo) => {\n\t\t\t\tgetReflectionText(response, convo);\n\t\t\t\tconvo.next();\n\t\t\t}\n\t\t}\n\t]);\n\n\tconvo.next();\n\n}\n\n// get reflection and end the day\nfunction getReflectionText(response, convo) {\n\n\tconst { task, name }                    = convo;\n\tconst { bot, source_message }           = task;\n\tconst { dailyTasks, startSessionGroup } = convo.dayEnd;\n\tvar responseMessage                     = response.text;\n\n\t// for now it is single enter that will be saved as the reflection\n\tconvo.dayEnd.reflection = responseMessage;\n\tconvo.say(`Great!`);\n\tconvo.say(\"See you tomorrow! :wave:\");\n\n}\n\n\n\n\n\n\n"]}