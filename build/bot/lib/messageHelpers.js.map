{"version":3,"sources":["../../../src/bot/lib/messageHelpers.js"],"names":[],"mappings":"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","file":"messageHelpers.js","sourcesContent":["/**\n * \t\t\tTHINGS THAT HELP WITH JS OBJECTS <> MESSAGES\n */\n\nconst FINISH_WORD = 'done';\nconst EXIT_EARLY_WORDS = ['exit', 'stop','never mind','quit'];\n\n\n/**\n * takes array of tasks and converts to array of task STRINGS\n * these \"response objects\" are botkit MESSAGE response\n * @param  {[object]} tasks task OBJECTS\n * @return {[string]}       task STRINGS\n */\nexport function convertResponseObjectsToTaskArray(tasks) {\n\n\tvar taskString = '';\n\ttasks.forEach((task, index) => {\n\t\t// ignore the last one (`done` command)\n\t\tif (task.text == FINISH_WORD)\n\t\t\treturn;\n\n\t\ttaskString += task.text;\n\t\ttaskString += '\\n';\n\t});\n\n\tconst commaOrNewLine = /[,\\n]+/;\n\tvar taskStringArray = taskString.split(commaOrNewLine);\n\ttaskStringArray.pop(); // last one will be \\n with this reg ex split\n\n\t// this is the final task array we are returning\n\tvar taskArray = [];\n\ttaskStringArray.forEach((taskString) => {\n\t\ttaskString = taskString.trim();\n\t\ttaskArray.push({\n\t\t\ttext: taskString\n\t\t})\n\t});\n\n\treturn taskArray;\n}\n\n// this should be called after you `convertToSingleTaskObjectArray`\nexport function convertArrayToTaskListMessage(taskArray) {\n\tvar taskListMessage = '';\n\tvar count = 1;\n\n\tif (taskArray.length  == 0) {\n\t\tconsole.log(\"array passed in is empty at convertArrayToTaskListMessage\");\n\t\treturn taskListMessage;\n\t}\n\n\ttaskArray.forEach((task) => {\n\n\t\t// for when you get task from DB\n\t\tif (task.dataValues) {\n\t\t\ttask = task.dataValues;\n\t\t}\n\n\t\tvar minutesMessage = task.minutes ? ` (${task.minutes} minutes)` : '';\n\t\tvar taskContent = `${count}) ${task.text}${minutesMessage}`;\n\n\t\ttaskContent = (task.done ? `> ~${taskContent}~\\n` : `> ${taskContent}\\n`);\n\t\ttaskListMessage += taskContent;\n\t\t\n\t\tcount++;\n\t});\n\treturn taskListMessage;\n}\n\n/**\n * convert a string of hours and minutes to total minutes int\n * @param  {string} string `1hr 2m`, `25 min`, etc.\n * @return {int}        number of minutes int\n * HACKY / temporary solution...\n */\nexport function convertTimeStringToMinutes(timeString) {\n\n\tvar totalMinutes = 0;\n\tvar timeArray = timeString.split(\" \");\n\n\tfor (var i = 0; i < timeArray.length; i++) {\n  \n  \tif (isNaN(parseInt(timeArray[i])))\n    \tcontinue;\n      \n\t\tvar minutes = 0;\n\n\t\t// option 1: int with space (i.e. `1 hr`)\n\t\tif (timeArray[i] == parseInt(timeArray[i])) {\n    \tminutes = parseInt(timeArray[i]);\n\t\t\tvar hourOrMinute = timeArray[i+1];\n\t\t\tif (hourOrMinute && hourOrMinute[0] == \"h\") {\n\t\t\t\tminutes *= 60;\n\t\t\t}\n\t\t} else {\n\t\t\t// option 2: int with no space (i.e. `1hr`)\n\t\t\t// use hacky solution...\n\t\t\tvar minutes = parseInt(timeArray[i]);\n\t\t\tvar minuteString = String(minutes);\n\t\t\tif (timeArray[i][minuteString.length] == \"h\") {\n\t\t\t\tminutes *= 60;\n\t\t\t}\n\t\t}\n\n    totalMinutes += minutes;\n\n\t}\n\n  \n\treturn totalMinutes;\n}\n\n// for simplicity, this converts database calls with all the associations\n// into a single JS object for us to decipher as a single task\n// \n/**\n * converts this into a single task object for consistency sake\n * @param  {[taskObject]} can be DailyTaskArray or TaskArray or WeeklyTaskArray...\n * @param  string type `daily`, `weekly`, etc...\n * @return {[taskObject]} taskObjectArray will always be BASE task with nested dailyTask, weeklyTask, etc.                \n */\nexport function convertToSingleTaskObjectArray(taskObjectArray, type) {\n\n\tswitch (type) {\n\t\tcase \"daily\":\n\t\t\t// if daily task, we need to add content and minutes to userId\n\t\t\treturn taskObjectArray.map((taskObject) => {\n\t\t\t\tconst { Task: { text, done, UserId } } = taskObject;\n\t\t\t\treturn {\n\t\t\t\t\t...taskObject,\n\t\t\t\t\tdataValues: {\n\t\t\t\t\t\t...taskObject.dataValues,\n\t\t\t\t\t\ttext,\n\t\t\t\t\t\tdone\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n}\n\n\n"]}